<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Free Camera (Num 0 Toggle)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(speedModifier,8)
speedModifier:
dd (float)3
globalalloc(useMouse,8)
useMouse:
dd (float)1 // 1 to use mouse, 0 to not use mouse
globalalloc(mouseSensitivity,8)
mouseSensitivity:
dd (float)8

aobscanmodule(camera_aob1,hnk.exe,66 89 83 10 0B 00 00 0F B7 83) // should be unique
aobscanmodule(camera_aob2,hnk.exe,0F 11 81 20 0B 00 00) // should be unique
aobscanmodule(camera_aob3,hnk.exe,02 0F 10 42 10 0F 11 41 10 0F 10 42 20) // should be unique
aobscanmodule(camera_tilt_aob1,hnk.exe,0F 11 93 10 0A 00 00 0F C6) // should be unique
//aobscanmodule(camera_tilt_aob2,hnk.exe,0F 11 8F 10 0A 00 00 41) // should be unique
aobscanmodule(player_aob,hnk.exe,E5 0F 5C A0 80 03 00 00) // should be unique
aobscanmodule(player_movement_aob,hnk.exe,75 10 48 8D 8F A0 CE 06 00) // should be unique
alloc(newmem,$1000,camera_aob1)

label(cameracode)
label(playercode)
label(playercoordinates)
label(cameracoordinates)
label(camerareturn)
label(playerreturn)

registersymbol(camera_aob1)
registersymbol(camera_aob2)
registersymbol(camera_aob3)
registersymbol(camera_tilt_aob1)
registersymbol(player_aob)
registersymbol(player_movement_aob)
registersymbol(playercoordinates)
registersymbol(cameracoordinates)

newmem:

cameracode:
  mov [cameracoordinates],rbx
  mov [rbx+00000B10],ax
  jmp camerareturn

playercode:
  mov [playercoordinates],rdi
  subps xmm4,[rax+00000380]
  jmp playerreturn

playercoordinates:
  dq #0

cameracoordinates:
  dq #0

camera_aob1:
  jmp cameracode
  nop 2
camerareturn:

player_aob+01:
  jmp playercode
  nop 2
playerreturn:

camera_aob1+1C:
  db 90 90 90 90 90 90 90 0F 10 83 00 0A 00 00 90 90 90 90 90 90 90

camera_aob2:
  db 90 90 90 90 90 90 90 0F 10 81 00 0A 00 00 90 90 90 90 90 90 90

camera_aob3+05:
  db 90 90 90 90 0F 10 42 20 90 90 90 90

camera_tilt_aob1:
  db 90 90 90 90 90 90 90

player_movement_aob:
  db EB 10

{$lua}

function checkKeys()
  if not (getForegroundProcess() == getOpenedProcessID()) then return end -- Only run if in game
  if (getAddressSafe("[cameracoordinates]")) then
    --Read and assign speed modifier value
    local speed = readFloat("speedModifier")
    local use_mouse = readFloat("useMouse")
    local mouse_speed = readFloat("mouseSensitivity")

    --Camera Coordinates
    local camx = readFloat("[cameracoordinates]+B30") -- Camera X
    local camy = readFloat("[cameracoordinates]+B38") -- Camera Y
    local camz = readFloat("[cameracoordinates]+B34") -- Camera Z

    --Target Coordinates
    local targetx = readFloat("[cameracoordinates]+B20") -- Camera X
    local targety = readFloat("[cameracoordinates]+B28") -- Camera Y
    local targetz = readFloat("[cameracoordinates]+B24") -- Camera Z

    --Prevent endless error loop if camera status is not initiated
    if (targetz == nil) or (targetz == camz and targetx == camx and targety == camy) then
      speed = 0
      camx = 0
      camy = 0
      camz = 0
      targetx = 0
      targety = 0
      targetz = 0
    else

      local new_mouse_x,new_mouse_y = getMousePos()
      local mouse_loaded = readInteger("cameracoordinates+48")

      --Initialize mouse coordinates on first run (if using mouse)
      if not (mouse_loaded == 1) and (use_mouse == 1) then
        new_mouse_x = getScreenWidth() / 2
        new_mouse_y = getScreenHeight() / 2
        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
        writeInteger("cameracoordinates+48",1)
      end

      --Measure mouse movement from previous cycle
      local mouse_move_x = new_mouse_x - getScreenWidth() / 2
      local mouse_move_y = new_mouse_y - getScreenHeight() / 2

      --Mouse Rotation in Radians
      --Use math.rad() to convert from degrees if game values aren't in radians
      local camdist = ((targetx - camx)^2 + (targety - camy)^2 + (targetz - camz)^2)^0.5
      local tilt = math.atan2(camz - targetz, ((targetx - camx)^2 + (targety - camy)^2)^0.5)
      local pan = math.atan2(targetx - camx, targety - camy) + math.rad(180) -- Horizontal (pan)
      local roll = readFloat("[cameracoordinates]+A18") -- Camera X

      --Sine and Cosine of Rotation Values
      local siny = math.sin(pan) -- Sine of Horizontal (pan)
      local cosy = math.cos(pan) -- Cosine of Horizontal (pan)
      local sinp = math.sin(tilt) -- Sine of Vertical (tilt)
      local cosp = math.cos(tilt) -- Cosine of Vertical (tilt)

      --Forward
      if isKeyPressed(VK_W) then
        camx = camx - (siny * speed * 0.03)
        camy = camy - (cosy * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Left
      if isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Back
      if isKeyPressed(VK_S) then
        camx = camx + (siny * speed * 0.03)
        camy = camy + (cosy * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Right
      if isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Forward/Right
      if isKeyPressed(VK_W) and isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Forward/Left
      if isKeyPressed(VK_W) and isKeyPressed(VK_A) then
        camx = camx - (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Back/Left
      if isKeyPressed(VK_S) and isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Back/Right
      if isKeyPressed(VK_S) and isKeyPressed(VK_D) then
        camx = camx + (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Up
      if isKeyPressed(VK_T) then
       camz = camz + (speed * 0.02)
      end
      --Down
      if isKeyPressed(VK_G) then
       camz = camz - (speed * 0.02)
      end
      --Pan right
      if isKeyPressed(VK_RIGHT) then
        pan = pan - speed * 0.01
      end
      --Pan left
      if isKeyPressed(VK_LEFT) then
        pan = pan + speed * 0.01
      end
      --Tilt up
      if isKeyPressed(VK_UP) then
        tilt = math.max(tilt - speed * 0.01, math.rad(-89.5))
      end
      --Tilt down
      if isKeyPressed(VK_DOWN) then
        tilt = math.min(tilt + speed * 0.01, math.rad(89.5))
      end
      --Roll left
      if isKeyPressed(VK_2) then
          writeFloat("[cameracoordinates]+A18", roll - (speed * 0.01))
      end
      --Roll right
      if isKeyPressed(VK_4) then
          writeFloat("[cameracoordinates]+A18", roll + (speed * 0.01))
      end
      --Roll neutral
      if isKeyPressed(VK_3) then
          writeFloat("[cameracoordinates]+A18", 0)
      end

      if (use_mouse == 1) then
        --Tilt by mouse
        if not(mouse_move_y == 0) then
          tilt = math.min(math.max(tilt + mouse_move_y * mouse_speed * 0.0003, math.rad(-89.5)), math.rad(89.5))
        end
        --Tilt by mouse
        if not(mouse_move_x == 0) then
          pan = pan - mouse_move_x * mouse_speed * 0.0003
        end

        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
      end

      --Create a copy of the entire memory block before alterations.  I do not know if +2C or +3C are used, but this preserves them.
      copyMemory("[cameracoordinates]+B20",32,"cameracoordinates+20")

      --Write new values into the temporary buffer
      writeFloat("cameracoordinates+30", camx)
      writeFloat("cameracoordinates+38", camy)
      writeFloat("cameracoordinates+34", camz)
      writeFloat("cameracoordinates+20", camx - (camdist * math.cos(tilt) * math.sin(pan)))
      writeFloat("cameracoordinates+28", camy - (camdist * math.cos(tilt) * math.cos(pan)))
      writeFloat("cameracoordinates+24", camz - (camdist * math.sin(tilt)))

      --Copy buffer back into memory read by game engine
      copyMemory("cameracoordinates+20",32,"[cameracoordinates]+B20")

      --Teleport to where the camera is looking
      if isKeyPressed(VK_OEM3) then
        copyMemory("cameracoordinates+20",12,"[playercoordinates]+380")
      end
    end

    --Speed Modifiers
    if isKeyPressed(VK_F3) then --If F3 is pressed, quadruple the speed
      writeFloat("speedModifier", 12)
    elseif isKeyPressed(VK_F2) then --If F2 is pressed, double the speed
      writeFloat("speedModifier", 6)
    elseif isKeyPressed(VK_F1) then --If F1 is pressed, slow way down
      writeFloat("speedModifier", .5)
    else --If nothing is pressed, speed is normal
      writeFloat("speedModifier", 3)
    end

    --Mouse Support
    if isKeyPressed(VK_PRIOR) then --If Page Up is pressed, enable mouse
      writeFloat("useMouse", 1)
    elseif isKeyPressed(VK_NEXT) then --If Page Down is pressed, disable mouse
      writeFloat("useMouse", 0)
    end
  end
end

t=createTimer(nil)
timer_setInterval(t, 10)
timer_onTimer(t, checkKeys)
timer_setEnabled(t, true)

{$asm}

[DISABLE]
{$lua}

timer_setEnabled(t, false)

{$asm}

camera_aob1:
  db 66 89 83 10 0B 00 00

camera_aob1+1C:
  db 0F 11 83 20 0B 00 00 0F 10 83 00 0A 00 00 0F 11 83 30 0B 00 00

camera_aob2:
  db 0F 11 81 20 0B 00 00 0F 10 81 00 0A 00 00 0F 11 81 30 0B 00 00

camera_aob3+05:
  db 0F 11 41 10 0F 10 42 20 0F 11 41 20

camera_tilt_aob1:
  db 0F 11 93 10 0A 00 00

player_aob+01:
  db 0F 5C A0 80 03 00 00

player_movement_aob:
  db 75 10

unregistersymbol(camera_aob1)
unregistersymbol(camera_aob2)
unregistersymbol(camera_aob3)
unregistersymbol(camera_tilt_aob1)
unregistersymbol(player_aob)
unregistersymbol(player_movement_aob)
unregistersymbol(playercoordinates)
unregistersymbol(cameracoordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1E8FA4 - Camera XYZ 1

hnk.exe+1E8F75: 0F 28 C2                 - movaps xmm0,xmm2
hnk.exe+1E8F78: 0F 59 C4                 - mulps xmm0,xmm4
hnk.exe+1E8F7B: 0F 59 C2                 - mulps xmm0,xmm2
hnk.exe+1E8F7E: 0F 59 15 3B 06 A3 00     - mulps xmm2,[hnk.exe+C195C0]
hnk.exe+1E8F85: 0F 5C E8                 - subps xmm5,xmm0
hnk.exe+1E8F88: 0F 59 EA                 - mulps xmm5,xmm2
hnk.exe+1E8F8B: 0F 59 EE                 - mulps xmm5,xmm6
hnk.exe+1E8F8E: 0F 28 B4 24 90 00 00 00  - movaps xmm6,[rsp+00000090]
hnk.exe+1E8F96: 0F 11 AB 60 01 00 00     - movups [rbx+00000160],xmm5
hnk.exe+1E8F9D: 0F B7 83 E0 09 00 00     - movzx eax,word ptr [rbx+000009E0]
// ---------- INJECTING HERE ----------
hnk.exe+1E8FA4: 66 89 83 10 0B 00 00     - mov [rbx+00000B10],ax - Safe Injection Point for Camera Module (rbx)
// ---------- DONE INJECTING  ----------
hnk.exe+1E8FAB: 0F B7 83 E2 09 00 00     - movzx eax,word ptr [rbx+000009E2]
hnk.exe+1E8FB2: 66 89 83 12 0B 00 00     - mov [rbx+00000B12],ax
hnk.exe+1E8FB9: 0F 10 83 F0 09 00 00     - movups xmm0,[rbx+000009F0]
// ---------- INJECTING HERE ----------
hnk.exe+1E8FC0: 0F 11 83 20 0B 00 00     - movups [rbx+00000B20],xmm0 - Camera Target XYZ 1
hnk.exe+1E8FC7: 0F 10 83 00 0A 00 00     - movups xmm0,[rbx+00000A00]
hnk.exe+1E8FCE: 0F 11 83 30 0B 00 00     - movups [rbx+00000B30],xmm0 - Camera XYZ 1
// ---------- DONE INJECTING  ----------
hnk.exe+1E8FD5: 0F 10 83 10 0A 00 00     - movups xmm0,[rbx+00000A10]
hnk.exe+1E8FDC: 0F 11 83 40 0B 00 00     - movups [rbx+00000B40],xmm0
hnk.exe+1E8FE3: 0F 10 83 20 0A 00 00     - movups xmm0,[rbx+00000A20]
hnk.exe+1E8FEA: 0F 11 83 50 0B 00 00     - movups [rbx+00000B50],xmm0

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EEF3A - Camera XYZ 2

hnk.exe+1EEEFA: 44 0F 10 81 40 0B 00 00  - movups xmm8,[rcx+00000B40]
hnk.exe+1EEF02: 41 0F 28 F8              - movaps xmm7,xmm8
hnk.exe+1EEF06: 41 0F C6 F8 AA           - shufps xmm7,xmm8,-56
hnk.exe+1EEF0B: 0F 8A 0F 01 00 00        - jp hnk.exe+1EF020
hnk.exe+1EEF11: 0F 85 09 01 00 00        - jne hnk.exe+1EF020
hnk.exe+1EEF17: 0F B7 81 E0 09 00 00     - movzx eax,word ptr [rcx+000009E0]
hnk.exe+1EEF1E: 66 89 81 10 0B 00 00     - mov [rcx+00000B10],ax
hnk.exe+1EEF25: 0F B7 81 E2 09 00 00     - movzx eax,word ptr [rcx+000009E2]
hnk.exe+1EEF2C: 66 89 81 12 0B 00 00     - mov [rcx+00000B12],ax
hnk.exe+1EEF33: 0F 10 81 F0 09 00 00     - movups xmm0,[rcx+000009F0]
// ---------- INJECTING HERE ----------
hnk.exe+1EEF3A: 0F 11 81 20 0B 00 00     - movups [rcx+00000B20],xmm0 - Camera Target XYZ 2
hnk.exe+1EEF41: 0F 10 81 00 0A 00 00     - movups xmm0,[rcx+00000A00]
hnk.exe+1EEF48: 0F 11 81 30 0B 00 00     - movups [rcx+00000B30],xmm0 - Camera XYZ 2
// ---------- DONE INJECTING  ----------
hnk.exe+1EEF4F: 0F 10 81 10 0A 00 00     - movups xmm0,[rcx+00000A10]
hnk.exe+1EEF56: 0F 11 81 40 0B 00 00     - movups [rcx+00000B40],xmm0
hnk.exe+1EEF5D: 0F 10 81 20 0A 00 00     - movups xmm0,[rcx+00000A20]
hnk.exe+1EEF64: 0F 11 81 50 0B 00 00     - movups [rcx+00000B50],xmm0
hnk.exe+1EEF6B: 8B 81 30 0A 00 00        - mov eax,[rcx+00000A30]
hnk.exe+1EEF71: 89 81 60 0B 00 00        - mov [rcx+00000B60],eax
hnk.exe+1EEF77: 8B 81 34 0A 00 00        - mov eax,[rcx+00000A34]
hnk.exe+1EEF7D: 89 81 64 0B 00 00        - mov [rcx+00000B64],eax

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1398E2 - Camera XYZ 3

hnk.exe+1398CB: CC           - int 3
hnk.exe+1398CC: CC           - int 3
hnk.exe+1398CD: CC           - int 3
hnk.exe+1398CE: CC           - int 3
hnk.exe+1398CF: CC           - int 3
hnk.exe+1398D0: 0F B7 02     - movzx eax,word ptr [rdx]
hnk.exe+1398D3: 66 89 01     - mov [rcx],ax
hnk.exe+1398D6: 0F B7 42 02  - movzx eax,word ptr [rdx+02]
hnk.exe+1398DA: 66 89 41 02  - mov [rcx+02],ax
hnk.exe+1398DE: 0F 10 42 10  - movups xmm0,[rdx+10]
// ---------- INJECTING HERE ----------
hnk.exe+1398E2: 0F 11 41 10  - movups [rcx+10],xmm0 - Camera Target XYZ 3
hnk.exe+1398E6: 0F 10 42 20  - movups xmm0,[rdx+20]
hnk.exe+1398EA: 0F 11 41 20  - movups [rcx+20],xmm0 - Camera XYZ 3
// ---------- DONE INJECTING  ----------
hnk.exe+1398EE: 0F 10 42 30  - movups xmm0,[rdx+30]
hnk.exe+1398F2: 0F 11 41 30  - movups [rcx+30],xmm0
hnk.exe+1398F6: 0F 10 42 40  - movups xmm0,[rdx+40]
hnk.exe+1398FA: 0F 11 41 40  - movups [rcx+40],xmm0
hnk.exe+1398FE: 8B 42 50     - mov eax,[rdx+50]
hnk.exe+139901: 89 41 50     - mov [rcx+50],eax
hnk.exe+139904: 8B 42 54     - mov eax,[rdx+54]
hnk.exe+139907: 89 41 54     - mov [rcx+54],eax

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ED038 - Camera Tilt / Pan / Roll 1

hnk.exe+1ED00E: 0F 28 D1                    - movaps xmm2,xmm1
hnk.exe+1ED011: 48 8D 54 24 70              - lea rdx,[rsp+70]
hnk.exe+1ED016: 0F 28 C7                    - movaps xmm0,xmm7
hnk.exe+1ED019: 48 8D 8C 24 80 00 00 00     - lea rcx,[rsp+00000080]
hnk.exe+1ED021: 0F C6 C0 00                 - shufps xmm0,xmm0,00
hnk.exe+1ED025: 0F C6 D0 50                 - shufps xmm2,xmm0,50
hnk.exe+1ED029: 0F 57 C0                    - xorps xmm0,xmm0
hnk.exe+1ED02C: 0F C6 D1 EC                 - shufps xmm2,xmm1,-14
hnk.exe+1ED030: F3 41 0F 10 D6              - movss xmm2,xmm14
hnk.exe+1ED035: 0F 28 CA                    - movaps xmm1,xmm2
// ---------- INJECTING HERE ----------
hnk.exe+1ED038: 0F 11 93 10 0A 00 00        - movups [rbx+00000A10],xmm2
// ---------- DONE INJECTING  ----------
hnk.exe+1ED03F: 0F C6 CA 55                 - shufps xmm1,xmm2,55
hnk.exe+1ED043: 0F C6 D2 00                 - shufps xmm2,xmm2,00
hnk.exe+1ED047: 0F 57 15 32 C5 A2 00        - xorps xmm2,[hnk.exe+C19580]
hnk.exe+1ED04E: 0F 14 D1                    - unpcklps xmm2,xmm1
hnk.exe+1ED051: 0F 16 D0                    - movlhps xmm2,xmm0
hnk.exe+1ED054: 66 0F 6F 05 E4 C4 A2 00     - movdqa xmm0,[hnk.exe+C19540]
hnk.exe+1ED05C: 66 0F DF C2                 - pandn xmm0,xmm2
hnk.exe+1ED060: 66 0F 7F 84 24 80 00 00 00  - movdqa [rsp+00000080],xmm0
hnk.exe+1ED069: E8 52 6B E9 FF              - call hnk.exe+83BC0
hnk.exe+1ED06E: 0F 28 BC 24 90 00 00 00     - movaps xmm7,[rsp+00000090]

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EE28E - Camera Tilt / Pan / Roll 1 (Unneeded)

hnk.exe+1EE264: 41 0F 28 C8                 - movaps xmm1,xmm8
hnk.exe+1EE268: 0F 28 C7                    - movaps xmm0,xmm7
hnk.exe+1EE26B: E8 A3 4A 82 00              - call hnk.exe+A12D13
hnk.exe+1EE270: E8 9B 70 EA FF              - call hnk.exe+95310
hnk.exe+1EE275: 0F C6 C0 00                 - shufps xmm0,xmm0,00
hnk.exe+1EE279: 0F 28 CE                    - movaps xmm1,xmm6
hnk.exe+1EE27C: 0F C6 C8 50                 - shufps xmm1,xmm0,50
hnk.exe+1EE280: 0F 28 C7                    - movaps xmm0,xmm7
hnk.exe+1EE283: 0F C6 CE EC                 - shufps xmm1,xmm6,-14
hnk.exe+1EE287: 0F 29 8D F0 04 00 00        - movaps [rbp+000004F0],xmm1
// ---------- INJECTING HERE ----------
hnk.exe+1EE28E: 0F 11 8F 10 0A 00 00        - movups [rdi+00000A10],xmm1
// ---------- DONE INJECTING  ----------
hnk.exe+1EE295: 41 0F 28 C8                 - movaps xmm1,xmm8
hnk.exe+1EE299: E8 75 4A 82 00              - call hnk.exe+A12D13
hnk.exe+1EE29E: E8 6D 70 EA FF              - call hnk.exe+95310
hnk.exe+1EE2A3: 0F 28 E8                    - movaps xmm5,xmm0
hnk.exe+1EE2A6: 48 85 DB                    - test rbx,rbx
hnk.exe+1EE2A9: 0F 84 A2 03 00 00           - je hnk.exe+1EE651
hnk.exe+1EE2AF: 0F 28 74 24 40              - movaps xmm6,[rsp+40]
hnk.exe+1EE2B4: 0F 57 E4                    - xorps xmm4,xmm4
hnk.exe+1EE2B7: 66 44 0F 6F 05 F0 B2 A2 00  - movdqa xmm8,[hnk.exe+C195B0]
hnk.exe+1EE2C0: 0F 28 CE                    - movaps xmm1,xmm6

// ORIGINAL CODE - INJECTION POINT: hnk.exe+2F50D6 - Player Location

hnk.exe+2F50A0: 66 44 0F 6F 1D 07 45 92 00     - movdqa xmm11,[hnk.exe+C195B0]
hnk.exe+2F50A9: 8B F0                          - mov esi,eax
hnk.exe+2F50AB: 0F 1F 44 00 00                 - nop dword ptr [rax+rax+00]
hnk.exe+2F50B0: 49 8B 03                       - mov rax,[r11]
hnk.exe+2F50B3: F7 80 28 0A 00 00 21 00 20 00  - test [rax+00000A28],00200021
hnk.exe+2F50BD: 0F 85 87 01 00 00              - jne hnk.exe+2F524A
hnk.exe+2F50C3: 48 3B F8                       - cmp rdi,rax
hnk.exe+2F50C6: 0F 84 7E 01 00 00              - je hnk.exe+2F524A
hnk.exe+2F50CC: 0F 10 AF 80 03 00 00           - movups xmm5,[rdi+00000380]
hnk.exe+2F50D3: 0F 28 E5                       - movaps xmm4,xmm5
// ---------- INJECTING HERE ----------
hnk.exe+2F50D6: 0F 5C A0 80 03 00 00           - subps xmm4,[rax+00000380]
// ---------- DONE INJECTING  ----------
hnk.exe+2F50DD: 0F 28 CC                       - movaps xmm1,xmm4
hnk.exe+2F50E0: 0F 59 CC                       - mulps xmm1,xmm4
hnk.exe+2F50E3: 0F 28 D1                       - movaps xmm2,xmm1
hnk.exe+2F50E6: 0F 28 C1                       - movaps xmm0,xmm1
hnk.exe+2F50E9: 0F C6 C1 00                    - shufps xmm0,xmm1,00
hnk.exe+2F50ED: 0F C6 D1 55                    - shufps xmm2,xmm1,55
hnk.exe+2F50F1: 0F 58 D0                       - addps xmm2,xmm0
hnk.exe+2F50F4: 0F C6 C9 AA                    - shufps xmm1,xmm1,-56
hnk.exe+2F50F8: F3 0F 10 80 80 07 00 00        - movss xmm0,[rax+00000780]
hnk.exe+2F5100: F3 0F 59 C0                    - mulss xmm0,xmm0

// ORIGINAL CODE - INJECTION POINT: hnk.exe+301B2D - Player Movement

hnk.exe+301B01: 48 8B D8                 - mov rbx,rax
hnk.exe+301B04: 41 8D 50 28              - lea edx,[r8+28]
hnk.exe+301B08: E8 E3 4E 55 00           - call hnk.exe+8569F0
hnk.exe+301B0D: 84 C0                    - test al,al
hnk.exe+301B0F: 0F 85 B1 00 00 00        - jne hnk.exe+301BC6
hnk.exe+301B15: BA 2E 00 00 00           - mov edx,0000002E
hnk.exe+301B1A: 48 8B CB                 - mov rcx,rbx
hnk.exe+301B1D: 44 8D 42 D4              - lea r8d,[rdx-2C]
hnk.exe+301B21: E8 CA 4E 55 00           - call hnk.exe+8569F0
hnk.exe+301B26: 40 38 B7 30 CF 06 00     - cmp [rdi+0006CF30],sil
// ---------- INJECTING HERE ----------
hnk.exe+301B2D: 75 10                    - jne hnk.exe+301B3F
// ---------- DONE INJECTING  ----------
hnk.exe+301B2F: 48 8D 8F A0 CE 06 00     - lea rcx,[rdi+0006CEA0]
hnk.exe+301B36: 41 0F 28 C9              - movaps xmm1,xmm9
hnk.exe+301B3A: E8 31 95 00 00           - call hnk.exe+30B070
hnk.exe+301B3F: 0F 28 BC 24 80 00 00 00  - movaps xmm7,[rsp+00000080]
hnk.exe+301B47: 0F 28 B4 24 90 00 00 00  - movaps xmm6,[rsp+00000090]
hnk.exe+301B4F: 4C 8B BC 24 A0 00 00 00  - mov r15,[rsp+000000A0]
hnk.exe+301B57: 4C 8B B4 24 A8 00 00 00  - mov r14,[rsp+000000A8]
hnk.exe+301B5F: 48 8B B4 24 E0 00 00 00  - mov rsi,[rsp+000000E0]
hnk.exe+301B67: 44 0F 28 44 24 70        - movaps xmm8,[rsp+70]
hnk.exe+301B6D: 48 8B 9C 24 D8 00 00 00  - mov rbx,[rsp+000000D8]
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>96</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Force Pause Action (Enable first, F5 pause / F6 unpause)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(forcepauseinject_aob,hnk.exe,E8 3B 7E D4 FF) // should be unique
aobscanmodule(forcepause_aob,hnk.exe,FF 50 18 F3 0F 10 83 7C 4E 00 00) // should be unique
alloc(newmem,$1000,forcepauseinject_aob)

label(toggleon)
label(toggleoff)
label(code)
label(pausecode)
label(freeze)
label(return)
label(pausereturn)

registersymbol(forcepauseinject_aob)
registersymbol(forcepause_aob)
registersymbol(freeze)

newmem:

toggleon:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,74 //VK_F5
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz toggleoff
  mov [freeze],#1
  jmp code

toggleoff:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,75 //VK_F6
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz code
  mov [freeze],#0

code:
  call hnk.exe+80EF0
  jmp return

pausecode:
  pushf
  cmp [freeze],#0
  je @f
  popf
  movss xmm0,[rbx+00004E7C]
  jmp pausereturn
@@:
  popf
  call qword ptr [rax+18]
  movss xmm0,[rbx+00004E7C]
  jmp pausereturn

freeze:
  dd #0

forcepauseinject_aob:
  jmp newmem
return:

forcepause_aob:
  jmp pausecode
  nop 6
pausereturn:

[DISABLE]

forcepauseinject_aob:
  db E8 3B 7E D4 FF

forcepause_aob:
  db FF 50 18 F3 0F 10 83 7C 4E 00 00

unregistersymbol(forcepauseinject_aob)
unregistersymbol(forcepause_aob)
unregistersymbol(freeze)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+3390B0 - Safe injection point

hnk.exe+33908D: C3                       - ret
hnk.exe+33908E: CC                       - int 3
hnk.exe+33908F: CC                       - int 3
hnk.exe+339090: 40 53                    - push rbx
hnk.exe+339092: 48 83 EC 50              - sub rsp,50
hnk.exe+339096: 48 8B D9                 - mov rbx,rcx
hnk.exe+339099: 0F 29 74 24 30           - movaps [rsp+30],xmm6
hnk.exe+33909E: 0F 28 F1                 - movaps xmm6,xmm1
hnk.exe+3390A1: F3 0F 11 B1 5C 59 00 00  - movss [rcx+0000595C],xmm6
hnk.exe+3390A9: 48 81 C1 20 4E 00 00     - add rcx,00004E20
// ---------- INJECTING HERE ----------
hnk.exe+3390B0: E8 3B 7E D4 FF           - call hnk.exe+80EF0
// ---------- DONE INJECTING  ----------
hnk.exe+3390B5: F3 0F 10 83 38 4E 00 00  - movss xmm0,[rbx+00004E38]
hnk.exe+3390BD: 0F 2E 83 34 4E 00 00     - ucomiss xmm0,[rbx+00004E34]
hnk.exe+3390C4: 7A 09                    - jp hnk.exe+3390CF
hnk.exe+3390C6: 75 07                    - jne hnk.exe+3390CF
hnk.exe+3390C8: C6 83 60 4E 00 00 00     - mov byte ptr [rbx+00004E60],00
hnk.exe+3390CF: 48 8D 8B 40 4E 00 00     - lea rcx,[rbx+00004E40]
hnk.exe+3390D6: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+3390D9: E8 12 7E D4 FF           - call hnk.exe+80EF0
hnk.exe+3390DE: F3 0F 10 8B 50 4E 00 00  - movss xmm1,[rbx+00004E50]
hnk.exe+3390E6: 0F 2E 0D 17 48 93 00     - ucomiss xmm1,[hnk.exe+C6D904]

// ORIGINAL CODE - INJECTION POINT: hnk.exe+33911C - Freeze Action

hnk.exe+3390ED: 7A 09                    - jp hnk.exe+3390F8
hnk.exe+3390EF: 75 07                    - jne hnk.exe+3390F8
hnk.exe+3390F1: C6 83 61 4E 00 00 00     - mov byte ptr [rbx+00004E61],00
hnk.exe+3390F8: 48 8B 8B A8 1D 00 00     - mov rcx,[rbx+00001DA8]
hnk.exe+3390FF: 0F 28 C6                 - movaps xmm0,xmm6
hnk.exe+339102: F3 0F 59 83 30 4E 00 00  - mulss xmm0,[rbx+00004E30]
hnk.exe+33910A: F3 0F 59 C1              - mulss xmm0,xmm1
hnk.exe+33910E: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+339111: F3 0F 11 83 58 59 00 00  - movss [rbx+00005958],xmm0
hnk.exe+339119: 48 8B 01                 - mov rax,[rcx]
// ---------- INJECTING HERE ----------
hnk.exe+33911C: FF 50 18                 - call qword ptr [rax+18]
// ---------- DONE INJECTING  ----------
hnk.exe+33911F: F3 0F 10 83 7C 4E 00 00  - movss xmm0,[rbx+00004E7C]
hnk.exe+339127: 0F 2F C6                 - comiss xmm0,xmm6
hnk.exe+33912A: 76 06                    - jna hnk.exe+339132
hnk.exe+33912C: F3 0F 5C C6              - subss xmm0,xmm6
hnk.exe+339130: EB 03                    - jmp hnk.exe+339135
hnk.exe+339132: 0F 57 C0                 - xorps xmm0,xmm0
hnk.exe+339135: F3 0F 11 83 7C 4E 00 00  - movss [rbx+00004E7C],xmm0
hnk.exe+33913D: 48 8B CB                 - mov rcx,rbx
hnk.exe+339140: 48 8B 03                 - mov rax,[rbx]
hnk.exe+339143: F3 0F 10 8B 58 59 00 00  - movss xmm1,[rbx+00005958]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>201</ID>
          <Description>"Enable Free Camera BEFORE pausing"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Increase Tilt Limit"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(tilt_limit_field_aob,hnk.exe,F3 0F 10 8B 3C 0A 00 00) // should be unique
aobscanmodule(tilt_limit_battle_aob,hnk.exe,F3 0F 10 8B 58 01 00 00 F3 0F 10 83) // should be unique
alloc(newmem,$1000,tilt_limit_field_aob)

label(tilt_limit_field_code)
label(tilt_limit_battle_code)
label(tiltlimitdown)
label(tiltlimitup)
label(tilt_limit_field_return)
label(tilt_limit_battle_return)

registersymbol(tilt_limit_field_aob)
registersymbol(tilt_limit_battle_aob)
registersymbol(tiltlimitdown)
registersymbol(tiltlimitup)

newmem:

tilt_limit_field_code:
  movss xmm1,[tiltlimitdown]
  movss xmm0,[tiltlimitup]
  jmp tilt_limit_field_return

tilt_limit_battle_code:
  movss xmm1,[tiltlimitup]
  movss xmm0,[tiltlimitdown]
  jmp tilt_limit_battle_return

tiltlimitdown:
dd (float)-89.5

tiltlimitup:
dd (float)89.5

tilt_limit_field_aob:
  jmp tilt_limit_field_code
  db 90 90 90 90 90 90 90 90 90 90 90
tilt_limit_field_return:

tilt_limit_battle_aob:
  jmp tilt_limit_battle_code
  db 90 90 90 90 90 90 90 90 90 90 90
tilt_limit_battle_return:

[DISABLE]

tilt_limit_field_aob:
  db F3 0F 10 8B 3C 0A 00 00 F3 0F 10 83 40 0A 00 00

tilt_limit_battle_aob:
  db F3 0F 10 8B 58 01 00 00 F3 0F 10 83 54 01 00 00

unregistersymbol(tilt_limit_field_aob)
unregistersymbol(tilt_limit_battle_aob)
unregistersymbol(tiltlimitdown)
unregistersymbol(tiltlimitup)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ECD40

hnk.exe+1ECD20: F3 0F 58 F9                    - addss xmm7,xmm1
hnk.exe+1ECD24: 0F 2F F8                       - comiss xmm7,xmm0
hnk.exe+1ECD27: 73 F7                          - jae hnk.exe+1ECD20
hnk.exe+1ECD29: 0F 2F F7                       - comiss xmm6,xmm7
hnk.exe+1ECD2C: 76 0B                          - jna hnk.exe+1ECD39
hnk.exe+1ECD2E: 66 90                          - nop 2
hnk.exe+1ECD30: F3 0F 58 F8                    - addss xmm7,xmm0
hnk.exe+1ECD34: 0F 2F F7                       - comiss xmm6,xmm7
hnk.exe+1ECD37: 77 F7                          - ja hnk.exe+1ECD30
hnk.exe+1ECD39: F6 83 72 0A 00 00 80           - test byte ptr [rbx+00000A72],-80
// ---------- INJECTING HERE ----------
hnk.exe+1ECD40: F3 0F 10 8B 3C 0A 00 00        - movss xmm1,[rbx+00000A3C]
hnk.exe+1ECD48: F3 0F 10 83 40 0A 00 00        - movss xmm0,[rbx+00000A40]
// ---------- DONE INJECTING  ----------
hnk.exe+1ECD50: F3 0F 59 CB                    - mulss xmm1,xmm3
hnk.exe+1ECD54: F3 0F 59 C3                    - mulss xmm0,xmm3
hnk.exe+1ECD58: F3 41 0F 5D C6                 - minss xmm0,xmm14
hnk.exe+1ECD5D: F3 0F 5F C8                    - maxss xmm1,xmm0
hnk.exe+1ECD61: 44 0F 28 F1                    - movaps xmm14,xmm1
hnk.exe+1ECD65: 74 0C                          - je hnk.exe+1ECD73
hnk.exe+1ECD67: C7 83 68 02 00 00 00 00 80 3F  - mov [rbx+00000268],3F800000
hnk.exe+1ECD71: EB 7C                          - jmp hnk.exe+1ECDEF
hnk.exe+1ECD73: F3 0F 10 44 24 60              - movss xmm0,[rsp+60]

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1CBAF0

hnk.exe+1CBAC2: F3 0F 5C C8              - subss xmm1,xmm0
hnk.exe+1CBAC6: F3 44 0F 5C C1           - subss xmm8,xmm1
hnk.exe+1CBACB: 41 0F 28 C0              - movaps xmm0,xmm8
hnk.exe+1CBACF: E8 2C AD 01 00           - call hnk.exe+1E6800
hnk.exe+1CBAD4: 0F 10 0F                 - movups xmm1,[rdi]
hnk.exe+1CBAD7: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1CBADB: 0F C6 C8 50              - shufps xmm1,xmm0,50
hnk.exe+1CBADF: 0F C6 0F EC              - shufps xmm1,[rdi],-14
hnk.exe+1CBAE3: E9 E0 00 00 00           - jmp hnk.exe+1CBBC8
hnk.exe+1CBAE8: 48 83 B8 80 00 00 00 00  - cmp qword ptr [rax+00000080],00
// ---------- INJECTING HERE ----------
hnk.exe+1CBAF0: F3 0F 10 8B 58 01 00 00  - movss xmm1,[rbx+00000158]
hnk.exe+1CBAF8: F3 0F 10 83 54 01 00 00  - movss xmm0,[rbx+00000154]
// ---------- DONE INJECTING  ----------
hnk.exe+1CBB00: 74 60                    - je hnk.exe+1CBB62
hnk.exe+1CBB02: F3 44 0F 5D C9           - minss xmm9,xmm1
hnk.exe+1CBB07: F3 41 0F 5F C1           - maxss xmm0,xmm9
hnk.exe+1CBB0C: E8 EF AC 01 00           - call hnk.exe+1E6800
hnk.exe+1CBB11: 0F 10 37                 - movups xmm6,[rdi]
hnk.exe+1CBB14: F3 0F 10 F0              - movss xmm6,xmm0
hnk.exe+1CBB18: 0F 11 37                 - movups [rdi],xmm6
hnk.exe+1CBB1B: 80 BB ED 01 00 00 00     - cmp byte ptr [rbx+000001ED],00
hnk.exe+1CBB22: 74 0C                    - je hnk.exe+1CBB30
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable Field Min Z"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(minZ_aob,hnk.exe,66 0F 7F 4C 24 40 F3 0F 10 87) // should be unique
registersymbol(minZ_aob)

minZ_aob:
  db 90 90 90 90 90 90

[DISABLE]

minZ_aob:
  db 66 0F 7F 4C 24 40

unregistersymbol(minZ_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EE64B

hnk.exe+1EE629: 0F C6 C6 55              - shufps xmm0,xmm6,55
hnk.exe+1EE62D: 0F 5C C1                 - subps xmm0,xmm1
hnk.exe+1EE630: 0F 2F D0                 - comiss xmm2,xmm0
hnk.exe+1EE633: 76 1C                    - jna hnk.exe+1EE651
hnk.exe+1EE635: F3 0F 58 CA              - addss xmm1,xmm2
hnk.exe+1EE639: 0F 28 C1                 - movaps xmm0,xmm1
hnk.exe+1EE63C: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1EE640: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+1EE643: 0F C6 C8 50              - shufps xmm1,xmm0,50
hnk.exe+1EE647: 0F C6 CE EC              - shufps xmm1,xmm6,-14
// ---------- INJECTING HERE ----------
hnk.exe+1EE64B: 66 0F 7F 4C 24 40        - movdqa [rsp+40],xmm1
// ---------- DONE INJECTING  ----------
hnk.exe+1EE651: F3 0F 10 87 C8 0A 00 00  - movss xmm0,[rdi+00000AC8]
hnk.exe+1EE659: F3 0F 11 45 80           - movss [rbp-80],xmm0
hnk.exe+1EE65E: 41 0F 28 C1              - movaps xmm0,xmm9
hnk.exe+1EE662: 48 8D 55 D0              - lea rdx,[rbp-30]
hnk.exe+1EE666: 0F 5C 87 90 01 00 00     - subps xmm0,[rdi+00000190]
hnk.exe+1EE66D: 48 8D 8D 30 06 00 00     - lea rcx,[rbp+00000630]
hnk.exe+1EE674: 0F 29 45 D0              - movaps [rbp-30],xmm0
hnk.exe+1EE678: E8 C3 4D F1 FF           - call hnk.exe+103440
hnk.exe+1EE67D: 48 8D 55 D0              - lea rdx,[rbp-30]
hnk.exe+1EE681: 4C 8B C0                 - mov r8,rax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>401</ID>
          <Description>"Enable no camera collision"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(field_camera_collider_aob,hnk.exe,0F 11 87 00 0A 00 00 E8) // should be unique
registersymbol(field_camera_collider_aob)

field_camera_collider_aob:
  db 90 90 90 90 90 90 90

[DISABLE]

field_camera_collider_aob:
  db 0F 11 87 00 0A 00 00

unregistersymbol(field_camera_collider_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EE6DD

hnk.exe+1EE6AC: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1EE6B0: 41 0F 59 00              - mulps xmm0,[r8]
hnk.exe+1EE6B4: 45 33 C0                 - xor r8d,r8d
hnk.exe+1EE6B7: 0F 59 C8                 - mulps xmm1,xmm0
hnk.exe+1EE6BA: 0F 28 05 DF 8B AE 00     - movaps xmm0,[hnk.exe+CD72A0]
hnk.exe+1EE6C1: 0F 59 C1                 - mulps xmm0,xmm1
hnk.exe+1EE6C4: F3 0F 10 4D 80           - movss xmm1,[rbp-80]
hnk.exe+1EE6C9: 0F 11 87 B0 01 00 00     - movups [rdi+000001B0],xmm0
hnk.exe+1EE6D0: F3 0F 11 8F 38 0A 00 00  - movss [rdi+00000A38],xmm1
hnk.exe+1EE6D8: 0F 28 44 24 40           - movaps xmm0,[rsp+40]
// ---------- INJECTING HERE ----------
hnk.exe+1EE6DD: 0F 11 87 00 0A 00 00     - movups [rdi+00000A00],xmm0
// ---------- DONE INJECTING  ----------
hnk.exe+1EE6E4: E8 57 A5 FF FF           - call hnk.exe+1E8C40
hnk.exe+1EE6E9: 4C 8D 9C 24 E8 08 00 00  - lea r11,[rsp+000008E8]
hnk.exe+1EE6F1: 41 0F 28 73 E8           - movaps xmm6,[r11-18]
hnk.exe+1EE6F6: 41 0F 28 7B D8           - movaps xmm7,[r11-28]
hnk.exe+1EE6FB: 45 0F 28 43 C8           - movaps xmm8,[r11-38]
hnk.exe+1EE700: 45 0F 28 4B B8           - movaps xmm9,[r11-48]
hnk.exe+1EE705: 45 0F 28 53 A8           - movaps xmm10,[r11-58]
hnk.exe+1EE70A: 45 0F 28 5B 98           - movaps xmm11,[r11-68]
hnk.exe+1EE70F: 45 0F 28 63 88           - movaps xmm12,[r11-78]
hnk.exe+1EE714: 45 0F 28 AB 78 FF FF FF  - movaps xmm13,[r11-00000088]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"Dev Stuff"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1001</ID>
          <Description>"Camera Status"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(camera_aob,hnk.exe,4C 8D 84 24 90 00 00 00 0F 28 D1) // should be unique
//aobscanmodule(camera_aob,hnk.exe,0F 11 93 10 0A 00 00 0F C6) // should be unique
alloc(newmem,$1000,camera_aob)
alloc(camerastatus,8)

label(code)
label(return)

registersymbol(camera_aob)
registersymbol(camerastatus)

newmem:
  mov [camerastatus],rbx

code:
  lea r8,[rsp+00000090]
  jmp return

camera_aob:
  jmp newmem
  nop 3
return:

[DISABLE]

camera_aob:
  db 4C 8D 84 24 90 00 00 00

unregistersymbol(camera_aob)
unregistersymbol(camerastatus)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ED006

hnk.exe+1ECFDB: 0F 14 DE                 - unpcklps xmm3,xmm6
hnk.exe+1ECFDE: 45 33 C9                 - xor r9d,r9d
hnk.exe+1ECFE1: 0F 14 E7                 - unpcklps xmm4,xmm7
hnk.exe+1ECFE4: 0F 28 D6                 - movaps xmm2,xmm6
hnk.exe+1ECFE7: 0F 16 E3                 - movlhps xmm4,xmm3
hnk.exe+1ECFEA: 48 8B CB                 - mov rcx,rbx
hnk.exe+1ECFED: 0F 29 A4 24 80 00 00 00  - movaps [rsp+00000080],xmm4
hnk.exe+1ECFF5: 66 89 74 24 20           - mov [rsp+20],si
hnk.exe+1ECFFA: E8 31 D0 FF FF           - call hnk.exe+1EA030
hnk.exe+1ECFFF: 0F 10 8B 10 0A 00 00     - movups xmm1,[rbx+00000A10]
// ---------- INJECTING HERE ----------
hnk.exe+1ED006: 4C 8D 84 24 90 00 00 00  - lea r8,[rsp+00000090]
// ---------- DONE INJECTING  ----------
hnk.exe+1ED00E: 0F 28 D1                 - movaps xmm2,xmm1
hnk.exe+1ED00E: 0F 28 D1                    - movaps xmm2,xmm1
hnk.exe+1ED011: 48 8D 54 24 70              - lea rdx,[rsp+70]
hnk.exe+1ED016: 0F 28 C7                    - movaps xmm0,xmm7
hnk.exe+1ED019: 48 8D 8C 24 80 00 00 00     - lea rcx,[rsp+00000080]
hnk.exe+1ED021: 0F C6 C0 00                 - shufps xmm0,xmm0,00
hnk.exe+1ED025: 0F C6 D0 50                 - shufps xmm2,xmm0,50
hnk.exe+1ED029: 0F 57 C0                    - xorps xmm0,xmm0
hnk.exe+1ED02C: 0F C6 D1 EC                 - shufps xmm2,xmm1,-14
hnk.exe+1ED030: F3 41 0F 10 D6              - movss xmm2,xmm14
hnk.exe+1ED035: 0F 28 CA                    - movaps xmm1,xmm2
// ---------- RBX points to the camera module
hnk.exe+1ED038: 0F 11 93 10 0A 00 00        - movups [rbx+00000A10],xmm2
// ----------
hnk.exe+1ED03F: 0F C6 CA 55                 - shufps xmm1,xmm2,55
hnk.exe+1ED043: 0F C6 D2 00                 - shufps xmm2,xmm2,00
hnk.exe+1ED047: 0F 57 15 32 C5 A2 00        - xorps xmm2,[hnk.exe+C19580]
hnk.exe+1ED04E: 0F 14 D1                    - unpcklps xmm2,xmm1
hnk.exe+1ED051: 0F 16 D0                    - movlhps xmm2,xmm0
hnk.exe+1ED054: 66 0F 6F 05 E4 C4 A2 00     - movdqa xmm0,[hnk.exe+C19540]
hnk.exe+1ED05C: 66 0F DF C2                 - pandn xmm0,xmm2
hnk.exe+1ED060: 66 0F 7F 84 24 80 00 00 00  - movdqa [rsp+00000080],xmm0
hnk.exe+1ED069: E8 52 6B E9 FF              - call hnk.exe+83BC0
hnk.exe+1ED06E: 0F 28 BC 24 90 00 00 00     - movaps xmm7,[rsp+00000090]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>10011</ID>
              <Description>"Tilt"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10012</ID>
              <Description>"Pan"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A14</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10013</ID>
              <Description>"Roll"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A18</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10014</ID>
              <Description>"Camera Target X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B20</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10015</ID>
              <Description>"Camera Target Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B28</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10016</ID>
              <Description>"Camera Target Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B24</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10017</ID>
              <Description>"Camera X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10018</ID>
              <Description>"Camera Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B38</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10019</ID>
              <Description>"Camera Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B34</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1002</ID>
          <Description>"Player Status"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(player_location_aob,hnk.exe,0F 10 AF 80 03 00 00 0F 28 E5) // should be unique
alloc(newmem,$1000,player_location_aob)

label(code)
label(player_location)
label(return)

registersymbol(player_location_aob)
registersymbol(player_location)

newmem:
  mov [player_location],rdi
code:
  movups xmm5,[rdi+00000380]
  jmp return

player_location:
  dd #0

player_location_aob:
  jmp newmem
  nop 2
return:

[DISABLE]

player_location_aob:
  db 0F 10 AF 80 03 00 00

unregistersymbol(player_location_aob)
unregistersymbol(player_location)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+2F50CC

hnk.exe+2F5094: 45 0F 29 5B 98                 - movaps [r11-68],xmm11
hnk.exe+2F5099: 4C 8B 99 40 10 00 00           - mov r11,[rcx+00001040]
hnk.exe+2F50A0: 66 44 0F 6F 1D 07 45 92 00     - movdqa xmm11,[hnk.exe+C195B0]
hnk.exe+2F50A9: 8B F0                          - mov esi,eax
hnk.exe+2F50AB: 0F 1F 44 00 00                 - nop dword ptr [rax+rax+00]
hnk.exe+2F50B0: 49 8B 03                       - mov rax,[r11]
hnk.exe+2F50B3: F7 80 28 0A 00 00 21 00 20 00  - test [rax+00000A28],00200021
hnk.exe+2F50BD: 0F 85 87 01 00 00              - jne hnk.exe+2F524A
hnk.exe+2F50C3: 48 3B F8                       - cmp rdi,rax
hnk.exe+2F50C6: 0F 84 7E 01 00 00              - je hnk.exe+2F524A
// ---------- INJECTING HERE ----------
hnk.exe+2F50CC: 0F 10 AF 80 03 00 00           - movups xmm5,[rdi+00000380]
// ---------- DONE INJECTING  ----------
hnk.exe+2F50D3: 0F 28 E5                       - movaps xmm4,xmm5
hnk.exe+2F50D6: 0F 5C A0 80 03 00 00           - subps xmm4,[rax+00000380]
hnk.exe+2F50DD: 0F 28 CC                       - movaps xmm1,xmm4
hnk.exe+2F50E0: 0F 59 CC                       - mulps xmm1,xmm4
hnk.exe+2F50E3: 0F 28 D1                       - movaps xmm2,xmm1
hnk.exe+2F50E6: 0F 28 C1                       - movaps xmm0,xmm1
hnk.exe+2F50E9: 0F C6 C1 00                    - shufps xmm0,xmm1,00
hnk.exe+2F50ED: 0F C6 D1 55                    - shufps xmm2,xmm1,55
hnk.exe+2F50F1: 0F 58 D0                       - addps xmm2,xmm0
hnk.exe+2F50F4: 0F C6 C9 AA                    - shufps xmm1,xmm1,-56
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>10021</ID>
              <Description>"Player X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>380</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10022</ID>
              <Description>"Player Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>388</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10023</ID>
              <Description>"Player Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>384</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <Comments>Based on the script by Cyber for Trails of Cold Steel IV
</Comments>
</CheatTable>
