<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Free Camera (Num 0 Toggle)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(speedModifier,8)
speedModifier:
dd (float)3
globalalloc(useMouse,8)
useMouse:
dd (float)1 // 1 to use mouse, 0 to not use mouse
globalalloc(mouseSensitivity,8)
mouseSensitivity:
dd (float)8

aobscanmodule(camera_aob1,hnk.exe,0F 11 83 10 0B 00 00 0F 10 47) // should be unique
aobscanmodule(camera_aob2,hnk.exe,44 0F 11 81 20 0B 00 00) // should be unique
aobscanmodule(camera_aob3,hnk.exe,0F 11 89 20 0B 00 00) // should be unique
aobscanmodule(camera_tilt_aob1,hnk.exe,0F 11 93 10 0A 00 00 E8) // should be unique
aobscanmodule(player_aob,hnk.exe,0F 5C A8 80 03 00 00) // should be unique
aobscanmodule(player_movement_aob,hnk.exe,75 10 48 8D 8F A0 CE 06 00) // should be unique
alloc(newmem,$1000,camera_aob1)

label(cameracode)
label(playercode)
label(playercoordinates)
label(cameracoordinates)
label(camerareturn)
label(playerreturn)

registersymbol(camera_aob1)
registersymbol(camera_aob2)
registersymbol(camera_aob3)
registersymbol(camera_tilt_aob1)
registersymbol(player_aob)
registersymbol(player_movement_aob)
registersymbol(playercoordinates)
registersymbol(cameracoordinates)

newmem:

cameracode:
  mov [cameracoordinates],rbx
  movups [rbx+00000B10],xmm0
  jmp camerareturn

playercode:
  mov [playercoordinates],rdi
  subps xmm5,[rax+00000380]
  jmp playerreturn

playercoordinates:
  dq #0

cameracoordinates:
  dq #0

camera_aob1:
  jmp cameracode
  nop 2
camerareturn:

player_aob:
  jmp playercode
  nop 2
playerreturn:

camera_aob1+B:
  db 90 90 90 90 90 90 90 0F 10 4F 30 90 90 90 90 90 90 90

camera_aob2:
  db 90 90 90 90 90 90 90 90 45 0F 28 43 C8 90 90 90 90 90 90 90

camera_aob3:
  db 90 90 90 90 90 90 90 0F 10 89 10 0A 00 00 90 90 90 90 90 90 90

camera_tilt_aob1:
  db 90 90 90 90 90 90 90

player_movement_aob:
  db EB 10

{$lua}

function checkKeys()
  if not (getForegroundProcess() == getOpenedProcessID()) then return end -- Only run if in game
  if (getAddressSafe("[cameracoordinates]")) then
    --Read and assign speed modifier value
    local speed = readFloat("speedModifier")
    local use_mouse = readFloat("useMouse")
    local mouse_speed = readFloat("mouseSensitivity")

    --Camera Coordinates
    local camx = readFloat("[cameracoordinates]+B30") -- Camera X
    local camy = readFloat("[cameracoordinates]+B38") -- Camera Y
    local camz = readFloat("[cameracoordinates]+B34") -- Camera Z

    --Target Coordinates
    local targetx = readFloat("[cameracoordinates]+B20") -- Camera X
    local targety = readFloat("[cameracoordinates]+B28") -- Camera Y
    local targetz = readFloat("[cameracoordinates]+B24") -- Camera Z

    --Prevent endless error loop if camera status is not initiated
    if (targetz == nil) or (targetz == camz and targetx == camx and targety == camy) then
      speed = 0
      camx = 0
      camy = 0
      camz = 0
      targetx = 0
      targety = 0
      targetz = 0
    else

      local new_mouse_x,new_mouse_y = getMousePos()
      local mouse_loaded = readInteger("cameracoordinates+48")

      --Initialize mouse coordinates on first run (if using mouse)
      if not (mouse_loaded == 1) and (use_mouse == 1) then
        new_mouse_x = getScreenWidth() / 2
        new_mouse_y = getScreenHeight() / 2
        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
        writeInteger("cameracoordinates+48",1)
      end

      --Measure mouse movement from previous cycle
      local mouse_move_x = new_mouse_x - getScreenWidth() / 2
      local mouse_move_y = new_mouse_y - getScreenHeight() / 2

      --Mouse Rotation in Radians
      --Use math.rad() to convert from degrees if game values aren't in radians
      local camdist = ((targetx - camx)^2 + (targety - camy)^2 + (targetz - camz)^2)^0.5
      local tilt = math.atan2(camz - targetz, ((targetx - camx)^2 + (targety - camy)^2)^0.5)
      local pan = math.atan2(targetx - camx, targety - camy) + math.rad(180) -- Horizontal (pan)
      local roll = readFloat("[cameracoordinates]+A18") -- Camera X

      --Sine and Cosine of Rotation Values
      local siny = math.sin(pan) -- Sine of Horizontal (pan)
      local cosy = math.cos(pan) -- Cosine of Horizontal (pan)
      local sinp = math.sin(tilt) -- Sine of Vertical (tilt)
      local cosp = math.cos(tilt) -- Cosine of Vertical (tilt)

      --Forward
      if isKeyPressed(VK_W) then
        camx = camx - (siny * speed * 0.03)
        camy = camy - (cosy * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Left
      if isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Back
      if isKeyPressed(VK_S) then
        camx = camx + (siny * speed * 0.03)
        camy = camy + (cosy * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Right
      if isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Forward/Right
      if isKeyPressed(VK_W) and isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Forward/Left
      if isKeyPressed(VK_W) and isKeyPressed(VK_A) then
        camx = camx - (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Back/Left
      if isKeyPressed(VK_S) and isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Back/Right
      if isKeyPressed(VK_S) and isKeyPressed(VK_D) then
        camx = camx + (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Up
      if isKeyPressed(VK_T) then
       camz = camz + (speed * 0.02)
      end
      --Down
      if isKeyPressed(VK_G) then
       camz = camz - (speed * 0.02)
      end
      --Pan right
      if isKeyPressed(VK_RIGHT) then
        pan = pan - speed * 0.01
      end
      --Pan left
      if isKeyPressed(VK_LEFT) then
        pan = pan + speed * 0.01
      end
      --Tilt up
      if isKeyPressed(VK_UP) then
        tilt = math.max(tilt - speed * 0.01, math.rad(-89.5))
      end
      --Tilt down
      if isKeyPressed(VK_DOWN) then
        tilt = math.min(tilt + speed * 0.01, math.rad(89.5))
      end
      --Roll left
      if isKeyPressed(VK_2) then
          writeFloat("[cameracoordinates]+A18", roll - (speed * 0.01))
      end
      --Roll right
      if isKeyPressed(VK_4) then
          writeFloat("[cameracoordinates]+A18", roll + (speed * 0.01))
      end
      --Roll neutral
      if isKeyPressed(VK_3) then
          writeFloat("[cameracoordinates]+A18", 0)
      end

      if (use_mouse == 1) then
        --Tilt by mouse
        if not(mouse_move_y == 0) then
          tilt = math.min(math.max(tilt + mouse_move_y * mouse_speed * 0.0003, math.rad(-89.5)), math.rad(89.5))
        end
        --Tilt by mouse
        if not(mouse_move_x == 0) then
          pan = pan - mouse_move_x * mouse_speed * 0.0003
        end

        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
      end

      --Create a copy of the entire memory block before alterations.  I do not know if +2C or +3C are used, but this preserves them.
      copyMemory("[cameracoordinates]+B20",32,"cameracoordinates+20")

      --Write new values into the temporary buffer
      writeFloat("cameracoordinates+30", camx)
      writeFloat("cameracoordinates+38", camy)
      writeFloat("cameracoordinates+34", camz)
      writeFloat("cameracoordinates+20", camx - (camdist * math.cos(tilt) * math.sin(pan)))
      writeFloat("cameracoordinates+28", camy - (camdist * math.cos(tilt) * math.cos(pan)))
      writeFloat("cameracoordinates+24", camz - (camdist * math.sin(tilt)))

      --Copy buffer back into memory read by game engine
      copyMemory("cameracoordinates+20",32,"[cameracoordinates]+B20")

      --Teleport to where the camera is looking
      if isKeyPressed(VK_OEM3) then
        copyMemory("cameracoordinates+20",12,"[playercoordinates]+380")
      end
    end

    --Speed Modifiers
    if isKeyPressed(VK_F3) then --If F3 is pressed, quadruple the speed
      writeFloat("speedModifier", 12)
    elseif isKeyPressed(VK_F2) then --If F2 is pressed, double the speed
      writeFloat("speedModifier", 6)
    elseif isKeyPressed(VK_F1) then --If F1 is pressed, slow way down
      writeFloat("speedModifier", .5)
    else --If nothing is pressed, speed is normal
      writeFloat("speedModifier", 3)
    end

    --Mouse Support
    if isKeyPressed(VK_PRIOR) then --If Page Up is pressed, enable mouse
      writeFloat("useMouse", 1)
    elseif isKeyPressed(VK_NEXT) then --If Page Down is pressed, disable mouse
      writeFloat("useMouse", 0)
    end
  end
end

t=createTimer(nil)
timer_setInterval(t, 10)
timer_onTimer(t, checkKeys)
timer_setEnabled(t, true)

{$asm}

[DISABLE]
{$lua}

timer_setEnabled(t, false)

{$asm}

camera_aob1:
  db 0F 11 83 10 0B 00 00

camera_aob1+B:
  db 0F 11 8B 20 0B 00 00 0F 10 4F 30 0F 11 83 30 0B 00 00

camera_aob2:
  db 44 0F 11 81 20 0B 00 00 45 0F 28 43 C8 0F 11 81 30 0B 00 00

camera_aob3:
  db 0F 11 89 20 0B 00 00 0F 10 89 10 0A 00 00 0F 11 81 30 0B 00 00

camera_tilt_aob1:
  db 0F 11 93 10 0A 00 00

player_aob:
  db 0F 5C A8 80 03 00 00

player_movement_aob:
  db 75 10

unregistersymbol(camera_aob1)
unregistersymbol(camera_aob2)
unregistersymbol(camera_aob3)
unregistersymbol(camera_tilt_aob1)
unregistersymbol(player_aob)
unregistersymbol(player_movement_aob)
unregistersymbol(playercoordinates)
unregistersymbol(cameracoordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1E95D1 - Camera XYZ 1

hnk.exe+1E95AA: 0F 59 0D CF 2E A8 00  - mulps xmm1,[hnk.exe+C6C480]
hnk.exe+1E95B1: 0F 5C D0              - subps xmm2,xmm0
hnk.exe+1E95B4: 0F 59 D1              - mulps xmm2,xmm1
hnk.exe+1E95B7: 0F 10 4F 10           - movups xmm1,[rdi+10]
hnk.exe+1E95BB: 0F 28 C2              - movaps xmm0,xmm2
hnk.exe+1E95BE: 0F 59 C5              - mulps xmm0,xmm5
hnk.exe+1E95C1: 0F 59 C2              - mulps xmm0,xmm2
hnk.exe+1E95C4: 0F 59 15 B5 2E A8 00  - mulps xmm2,[hnk.exe+C6C480]
hnk.exe+1E95CB: 0F 5C E0              - subps xmm4,xmm0
hnk.exe+1E95CE: 0F 10 07              - movups xmm0,[rdi]
// ---------- INJECTING HERE ----------
hnk.exe+1E95D1: 0F 11 83 10 0B 00 00  - movups [rbx+00000B10],xmm0 - Safe Injection Point for Camera Module (rbx)
// ---------- DONE INJECTING  ----------
hnk.exe+1E95D8: 0F 10 47 20           - movups xmm0,[rdi+20]
// ---------- INJECTING HERE ----------
hnk.exe+1E95DC: 0F 11 8B 20 0B 00 00  - movups [rbx+00000B20],xmm1 - Camera Target XYZ 1
hnk.exe+1E95E3: 0F 10 4F 30           - movups xmm1,[rdi+30]
hnk.exe+1E95E7: 0F 11 83 30 0B 00 00  - movups [rbx+00000B30],xmm0 - Camera XYZ 1
// ---------- DONE INJECTING  ----------
hnk.exe+1E95EE: 0F 10 47 40           - movups xmm0,[rdi+40]
hnk.exe+1E95F2: 0F 11 8B 40 0B 00 00  - movups [rbx+00000B40],xmm1
hnk.exe+1E95F9: 0F 10 4F 50           - movups xmm1,[rdi+50]
hnk.exe+1E95FD: 0F 11 83 50 0B 00 00  - movups [rbx+00000B50],xmm0
hnk.exe+1E9604: 0F 10 47 60           - movups xmm0,[rdi+60]
hnk.exe+1E9608: 0F 11 8B 60 0B 00 00  - movups [rbx+00000B60],xmm1

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EF0CF - Camera XYZ 2

hnk.exe+1EF0A1: 0F 10 89 10 0A 00 00     - movups xmm1,[rcx+00000A10]
hnk.exe+1EF0A8: 0F 59 D0                 - mulps xmm2,xmm0
hnk.exe+1EF0AB: 0F 28 C2                 - movaps xmm0,xmm2
hnk.exe+1EF0AE: 0F 59 DA                 - mulps xmm3,xmm2
hnk.exe+1EF0B1: 0F 59 C5                 - mulps xmm0,xmm5
hnk.exe+1EF0B4: 0F 59 C2                 - mulps xmm0,xmm2
hnk.exe+1EF0B7: 0F 5C E0                 - subps xmm4,xmm0
hnk.exe+1EF0BA: 0F 10 81 E0 09 00 00     - movups xmm0,[rcx+000009E0]
hnk.exe+1EF0C1: 0F 11 81 10 0B 00 00     - movups [rcx+00000B10],xmm0
hnk.exe+1EF0C8: 0F 10 81 00 0A 00 00     - movups xmm0,[rcx+00000A00]
// ---------- INJECTING HERE ----------
hnk.exe+1EF0CF: 44 0F 11 81 20 0B 00 00  - movups [rcx+00000B20],xmm8 - Camera Target XYZ 2
hnk.exe+1EF0D7: 45 0F 28 43 C8           - movaps xmm8,[r11-38]
hnk.exe+1EF0DC: 0F 11 81 30 0B 00 00     - movups [rcx+00000B30],xmm0 - Camera XYZ 2
// ---------- DONE INJECTING  ----------
hnk.exe+1EF0E3: 0F 10 81 20 0A 00 00     - movups xmm0,[rcx+00000A20]
hnk.exe+1EF0EA: 0F 11 89 40 0B 00 00     - movups [rcx+00000B40],xmm1
hnk.exe+1EF0F1: 0F 10 89 30 0A 00 00     - movups xmm1,[rcx+00000A30]
hnk.exe+1EF0F8: 0F 11 81 50 0B 00 00     - movups [rcx+00000B50],xmm0
hnk.exe+1EF0FF: 0F 10 81 40 0A 00 00     - movups xmm0,[rcx+00000A40]
hnk.exe+1EF106: 0F 11 89 60 0B 00 00     - movups [rcx+00000B60],xmm1
hnk.exe+1EF10D: 0F 10 89 50 0A 00 00     - movups xmm1,[rcx+00000A50]
hnk.exe+1EF114: 0F 11 81 70 0B 00 00     - movups [rcx+00000B70],xmm0

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EF472 - Camera XYZ 3

hnk.exe+1EF431: 0F 2E C6                       - ucomiss xmm0,xmm6
hnk.exe+1EF434: 44 0F 29 44 24 30              - movaps [rsp+30],xmm8
hnk.exe+1EF43A: 44 0F 29 4C 24 20              - movaps [rsp+20],xmm9
hnk.exe+1EF440: 66 44 0F 70 89 40 0B 00 00 AA  - pshufd xmm9,[rcx+00000B40]-56
hnk.exe+1EF44A: 0F 8A 89 00 00 00              - jp hnk.exe+1EF4D9
hnk.exe+1EF450: 0F 85 83 00 00 00              - jne hnk.exe+1EF4D9
hnk.exe+1EF456: 0F 10 81 E0 09 00 00           - movups xmm0,[rcx+000009E0]
hnk.exe+1EF45D: 0F 10 89 F0 09 00 00           - movups xmm1,[rcx+000009F0]
hnk.exe+1EF464: 0F 11 81 10 0B 00 00           - movups [rcx+00000B10],xmm0
hnk.exe+1EF46B: 0F 10 81 00 0A 00 00           - movups xmm0,[rcx+00000A00]
// ---------- INJECTING HERE ----------
hnk.exe+1EF472: 0F 11 89 20 0B 00 00           - movups [rcx+00000B20],xmm1 - Camera Target XYZ 3
hnk.exe+1EF479: 0F 10 89 10 0A 00 00           - movups xmm1,[rcx+00000A10]
hnk.exe+1EF480: 0F 11 81 30 0B 00 00           - movups [rcx+00000B30],xmm0 - Camera XYZ 3
// ---------- DONE INJECTING  ----------
hnk.exe+1EF487: 0F 10 81 20 0A 00 00           - movups xmm0,[rcx+00000A20]
hnk.exe+1EF48E: 0F 11 89 40 0B 00 00           - movups [rcx+00000B40],xmm1
hnk.exe+1EF495: 0F 10 89 30 0A 00 00           - movups xmm1,[rcx+00000A30]
hnk.exe+1EF49C: 0F 11 81 50 0B 00 00           - movups [rcx+00000B50],xmm0
hnk.exe+1EF4A3: 0F 10 81 40 0A 00 00           - movups xmm0,[rcx+00000A40]
hnk.exe+1EF4AA: 0F 11 89 60 0B 00 00           - movups [rcx+00000B60],xmm1
hnk.exe+1EF4B1: 0F 10 89 50 0A 00 00           - movups xmm1,[rcx+00000A50]
hnk.exe+1EF4B8: 0F 11 81 70 0B 00 00           - movups [rcx+00000B70],xmm0

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ED0C4 - Camera Tilt / Pan / Roll 1

hnk.exe+1ED09A: E8 51 D1 FF FF              - call hnk.exe+1EA1F0
hnk.exe+1ED09F: 0F 10 8B 10 0A 00 00        - movups xmm1,[rbx+00000A10]
hnk.exe+1ED0A6: E9 55 2F E0 FF              - jmp 13FFF0000
hnk.exe+1ED0AB: 66 90                       - nop 2
hnk.exe+1ED0AD: 0F 28 C6                    - movaps xmm0,xmm6
hnk.exe+1ED0B0: 0F 28 D1                    - movaps xmm2,xmm1
hnk.exe+1ED0B3: 0F C6 C0 00                 - shufps xmm0,xmm0,00
hnk.exe+1ED0B7: 0F C6 D0 50                 - shufps xmm2,xmm0,50
hnk.exe+1ED0BB: 0F C6 D1 EC                 - shufps xmm2,xmm1,-14
hnk.exe+1ED0BF: F3 41 0F 10 D7              - movss xmm2,xmm15
// ---------- INJECTING HERE ----------
hnk.exe+1ED0C4: 0F 11 93 10 0A 00 00        - movups [rbx+00000A10],xmm2
// ---------- DONE INJECTING  ----------
hnk.exe+1ED0CB: E8 E0 AA FF FF              - call hnk.exe+1E7BB0
hnk.exe+1ED0D0: 0F 28 B4 24 20 01 00 00     - movaps xmm6,[rsp+00000120]
hnk.exe+1ED0D8: 41 0F B6 C5                 - movzx eax,r13l
hnk.exe+1ED0DC: 0F 28 BC 24 10 01 00 00     - movaps xmm7,[rsp+00000110]
hnk.exe+1ED0E4: 44 0F 28 BC 24 90 00 00 00  - movaps xmm15,[rsp+00000090]
hnk.exe+1ED0ED: 48 81 C4 48 01 00 00        - add rsp,00000148
hnk.exe+1ED0F4: 41 5D                       - pop r13
hnk.exe+1ED0F6: 5E                          - pop rsi
hnk.exe+1ED0F7: 5D                          - pop rbp
hnk.exe+1ED0F8: 5B                          - pop rbx

// ORIGINAL CODE - INJECTION POINT: hnk.exe+2F5576 - Player Location

hnk.exe+2F553D: 4C 8B 99 40 10 00 00           - mov r11,[rcx+00001040]
hnk.exe+2F5544: 8B F0                          - mov esi,eax
hnk.exe+2F5546: 66 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
hnk.exe+2F5550: 49 8B 03                       - mov rax,[r11]
hnk.exe+2F5553: F7 80 28 0A 00 00 21 00 20 00  - test [rax+00000A28],00200021
hnk.exe+2F555D: 0F 85 34 01 00 00              - jne hnk.exe+2F5697
hnk.exe+2F5563: 48 3B F8                       - cmp rdi,rax
hnk.exe+2F5566: 0F 84 2B 01 00 00              - je hnk.exe+2F5697
hnk.exe+2F556C: 0F 10 97 80 03 00 00           - movups xmm2,[rdi+00000380]
hnk.exe+2F5573: 0F 28 EA                       - movaps xmm5,xmm2
// ---------- INJECTING HERE ----------
hnk.exe+2F5576: 0F 5C A8 80 03 00 00           - subps xmm5,[rax+00000380]
// ---------- DONE INJECTING  ----------
hnk.exe+2F557D: 0F 28 CD                       - movaps xmm1,xmm5
hnk.exe+2F5580: 0F 59 CD                       - mulps xmm1,xmm5
hnk.exe+2F5583: 0F 28 F9                       - movaps xmm7,xmm1
hnk.exe+2F5586: 0F 28 C1                       - movaps xmm0,xmm1
hnk.exe+2F5589: 0F C6 C1 00                    - shufps xmm0,xmm1,00
hnk.exe+2F558D: 0F C6 F9 55                    - shufps xmm7,xmm1,55
hnk.exe+2F5591: 0F 58 F8                       - addps xmm7,xmm0
hnk.exe+2F5594: 0F C6 C9 AA                    - shufps xmm1,xmm1,-56
hnk.exe+2F5598: F3 0F 10 80 80 07 00 00        - movss xmm0,[rax+00000780]
hnk.exe+2F55A0: F3 0F 59 C0                    - mulss xmm0,xmm0

// ORIGINAL CODE - INJECTION POINT: hnk.exe+301BDD - Player Movement

hnk.exe+301BB1: 48 8B D8                 - mov rbx,rax
hnk.exe+301BB4: 41 8D 50 28              - lea edx,[r8+28]
hnk.exe+301BB8: E8 C3 DB 55 00           - call hnk.exe+85F780
hnk.exe+301BBD: 84 C0                    - test al,al
hnk.exe+301BBF: 0F 85 B1 00 00 00        - jne hnk.exe+301C76
hnk.exe+301BC5: BA 2E 00 00 00           - mov edx,0000002E
hnk.exe+301BCA: 48 8B CB                 - mov rcx,rbx
hnk.exe+301BCD: 44 8D 42 D4              - lea r8d,[rdx-2C]
hnk.exe+301BD1: E8 AA DB 55 00           - call hnk.exe+85F780
hnk.exe+301BD6: 40 38 B7 30 CF 06 00     - cmp [rdi+0006CF30],sil
// ---------- INJECTING HERE ----------
hnk.exe+301BDD: 75 10                    - jne hnk.exe+301BEF
// ---------- DONE INJECTING  ----------
hnk.exe+301BDF: 48 8D 8F A0 CE 06 00     - lea rcx,[rdi+0006CEA0]
hnk.exe+301BE6: 41 0F 28 C9              - movaps xmm1,xmm9
hnk.exe+301BEA: E8 C1 99 00 00           - call hnk.exe+30B5B0
hnk.exe+301BEF: 0F 28 BC 24 80 00 00 00  - movaps xmm7,[rsp+00000080]
hnk.exe+301BF7: 0F 28 B4 24 90 00 00 00  - movaps xmm6,[rsp+00000090]
hnk.exe+301BFF: 4C 8B BC 24 A0 00 00 00  - mov r15,[rsp+000000A0]
hnk.exe+301C07: 4C 8B B4 24 A8 00 00 00  - mov r14,[rsp+000000A8]
hnk.exe+301C0F: 48 8B B4 24 E0 00 00 00  - mov rsi,[rsp+000000E0]
hnk.exe+301C17: 44 0F 28 44 24 70        - movaps xmm8,[rsp+70]
hnk.exe+301C1D: 48 8B 9C 24 D8 00 00 00  - mov rbx,[rsp+000000D8]
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>96</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Force Pause Action (Enable first, F5 pause / F6 unpause)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(forcepauseinject_aob,hnk.exe,E8 9B 74 D4 FF) // should be unique
aobscanmodule(forcepause_aob,hnk.exe,FF 50 18 F3 0F 10 83 7C 4E 00 00) // should be unique
alloc(newmem,$1000,forcepauseinject_aob)

label(toggleon)
label(toggleoff)
label(code)
label(pausecode)
label(freeze)
label(return)
label(pausereturn)

registersymbol(forcepauseinject_aob)
registersymbol(forcepause_aob)
registersymbol(freeze)

newmem:

toggleon:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,74 //VK_F5
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz toggleoff
  mov [freeze],#1
  jmp code

toggleoff:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,75 //VK_F6
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz code
  mov [freeze],#0

code:
  call hnk.exe+80AB0
  jmp return

pausecode:
  pushf
  cmp [freeze],#0
  je @f
  popf
  movss xmm0,[rbx+00004E7C]
  jmp pausereturn
@@:
  popf
  call qword ptr [rax+18]
  movss xmm0,[rbx+00004E7C]
  jmp pausereturn

freeze:
  dd #0

forcepauseinject_aob:
  jmp newmem
return:

forcepause_aob:
  jmp pausecode
  nop 6
pausereturn:

[DISABLE]

forcepauseinject_aob:
  db E8 9B 74 D4 FF

forcepause_aob:
  db FF 50 18 F3 0F 10 83 7C 4E 00 00

unregistersymbol(forcepauseinject_aob)
unregistersymbol(forcepause_aob)
unregistersymbol(freeze)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+339610 - Safe injection point

hnk.exe+3395ED: C3                       - ret
hnk.exe+3395EE: CC                       - int 3
hnk.exe+3395EF: CC                       - int 3
hnk.exe+3395F0: 40 53                    - push rbx
hnk.exe+3395F2: 48 83 EC 50              - sub rsp,50
hnk.exe+3395F6: 48 8B D9                 - mov rbx,rcx
hnk.exe+3395F9: 0F 29 74 24 30           - movaps [rsp+30],xmm6
hnk.exe+3395FE: 0F 28 F1                 - movaps xmm6,xmm1
hnk.exe+339601: F3 0F 11 B1 5C 59 00 00  - movss [rcx+0000595C],xmm6
hnk.exe+339609: 48 81 C1 20 4E 00 00     - add rcx,00004E20
// ---------- INJECTING HERE ----------
hnk.exe+339610: E8 9B 74 D4 FF           - call hnk.exe+80AB0
// ---------- DONE INJECTING  ----------
hnk.exe+339615: F3 0F 10 83 38 4E 00 00  - movss xmm0,[rbx+00004E38]
hnk.exe+33961D: 0F 2E 83 34 4E 00 00     - ucomiss xmm0,[rbx+00004E34]
hnk.exe+339624: 7A 09                    - jp hnk.exe+33962F
hnk.exe+339626: 75 07                    - jne hnk.exe+33962F
hnk.exe+339628: C6 83 60 4E 00 00 00     - mov byte ptr [rbx+00004E60],00
hnk.exe+33962F: 48 8D 8B 40 4E 00 00     - lea rcx,[rbx+00004E40]
hnk.exe+339636: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+339639: E8 72 74 D4 FF           - call hnk.exe+80AB0
hnk.exe+33963E: F3 0F 10 8B 50 4E 00 00  - movss xmm1,[rbx+00004E50]
hnk.exe+339646: 0F 2E 0D 7F DD 93 00     - ucomiss xmm1,[hnk.exe+C773CC]

// ORIGINAL CODE - INJECTION POINT: hnk.exe+33967C - Freeze Action

hnk.exe+33964D: 7A 09                    - jp hnk.exe+339658
hnk.exe+33964F: 75 07                    - jne hnk.exe+339658
hnk.exe+339651: C6 83 61 4E 00 00 00     - mov byte ptr [rbx+00004E61],00
hnk.exe+339658: 48 8B 8B A8 1D 00 00     - mov rcx,[rbx+00001DA8]
hnk.exe+33965F: 0F 28 C6                 - movaps xmm0,xmm6
hnk.exe+339662: F3 0F 59 83 30 4E 00 00  - mulss xmm0,[rbx+00004E30]
hnk.exe+33966A: F3 0F 59 C1              - mulss xmm0,xmm1
hnk.exe+33966E: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+339671: F3 0F 11 83 58 59 00 00  - movss [rbx+00005958],xmm0
hnk.exe+339679: 48 8B 01                 - mov rax,[rcx]
// ---------- INJECTING HERE ----------
hnk.exe+33967C: FF 50 18                 - call qword ptr [rax+18]
// ---------- DONE INJECTING  ----------
hnk.exe+33967F: F3 0F 10 83 7C 4E 00 00  - movss xmm0,[rbx+00004E7C]
hnk.exe+339687: 0F 2F C6                 - comiss xmm0,xmm6
hnk.exe+33968A: 76 06                    - jna hnk.exe+339692
hnk.exe+33968C: F3 0F 5C C6              - subss xmm0,xmm6
hnk.exe+339690: EB 03                    - jmp hnk.exe+339695
hnk.exe+339692: 0F 57 C0                 - xorps xmm0,xmm0
hnk.exe+339695: F3 0F 11 83 7C 4E 00 00  - movss [rbx+00004E7C],xmm0
hnk.exe+33969D: 48 8B CB                 - mov rcx,rbx
hnk.exe+3396A0: 48 8B 03                 - mov rax,[rbx]
hnk.exe+3396A3: F3 0F 10 8B 58 59 00 00  - movss xmm1,[rbx+00005958]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>201</ID>
          <Description>"Enable Free Camera BEFORE pausing"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Increase Tilt Limit"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(tilt_limit_field_aob,hnk.exe,F3 0F 10 8B 3C 0A 00 00) // should be unique
aobscanmodule(tilt_limit_battle_aob,hnk.exe,F3 0F 10 8B 58 01 00 00 F3 0F 10 83) // should be unique
alloc(newmem,$1000,tilt_limit_field_aob)

label(tilt_limit_field_code)
label(tilt_limit_battle_code)
label(tiltlimitdown)
label(tiltlimitup)
label(tilt_limit_field_return)
label(tilt_limit_battle_return)

registersymbol(tilt_limit_field_aob)
registersymbol(tilt_limit_battle_aob)
registersymbol(tiltlimitdown)
registersymbol(tiltlimitup)

newmem:

tilt_limit_field_code:
  movss xmm1,[tiltlimitdown]
  movss xmm0,[tiltlimitup]
  jmp tilt_limit_field_return

tilt_limit_battle_code:
  movss xmm1,[tiltlimitup]
  movss xmm0,[tiltlimitdown]
  jmp tilt_limit_battle_return

tiltlimitdown:
dd (float)-89.5

tiltlimitup:
dd (float)89.5

tilt_limit_field_aob:
  jmp tilt_limit_field_code
  db 90 90 90 90 90 90 90 90 90 90 90
tilt_limit_field_return:

tilt_limit_battle_aob:
  jmp tilt_limit_battle_code
  db 90 90 90 90 90 90 90 90 90 90 90
tilt_limit_battle_return:

[DISABLE]

tilt_limit_field_aob:
  db F3 0F 10 8B 3C 0A 00 00 F3 0F 10 83 40 0A 00 00

tilt_limit_battle_aob:
  db F3 0F 10 8B 58 01 00 00 F3 0F 10 83 54 01 00 00

unregistersymbol(tilt_limit_field_aob)
unregistersymbol(tilt_limit_battle_aob)
unregistersymbol(tiltlimitdown)
unregistersymbol(tiltlimitup)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ECD40

hnk.exe+1ECD20: F3 0F 58 F9                    - addss xmm7,xmm1
hnk.exe+1ECD24: 0F 2F F8                       - comiss xmm7,xmm0
hnk.exe+1ECD27: 73 F7                          - jae hnk.exe+1ECD20
hnk.exe+1ECD29: 0F 2F F7                       - comiss xmm6,xmm7
hnk.exe+1ECD2C: 76 0B                          - jna hnk.exe+1ECD39
hnk.exe+1ECD2E: 66 90                          - nop 2
hnk.exe+1ECD30: F3 0F 58 F8                    - addss xmm7,xmm0
hnk.exe+1ECD34: 0F 2F F7                       - comiss xmm6,xmm7
hnk.exe+1ECD37: 77 F7                          - ja hnk.exe+1ECD30
hnk.exe+1ECD39: F6 83 72 0A 00 00 80           - test byte ptr [rbx+00000A72],-80
// ---------- INJECTING HERE ----------
hnk.exe+1ECD40: F3 0F 10 8B 3C 0A 00 00        - movss xmm1,[rbx+00000A3C]
hnk.exe+1ECD48: F3 0F 10 83 40 0A 00 00        - movss xmm0,[rbx+00000A40]
// ---------- DONE INJECTING  ----------
hnk.exe+1ECD50: F3 0F 59 CB                    - mulss xmm1,xmm3
hnk.exe+1ECD54: F3 0F 59 C3                    - mulss xmm0,xmm3
hnk.exe+1ECD58: F3 41 0F 5D C6                 - minss xmm0,xmm14
hnk.exe+1ECD5D: F3 0F 5F C8                    - maxss xmm1,xmm0
hnk.exe+1ECD61: 44 0F 28 F1                    - movaps xmm14,xmm1
hnk.exe+1ECD65: 74 0C                          - je hnk.exe+1ECD73
hnk.exe+1ECD67: C7 83 68 02 00 00 00 00 80 3F  - mov [rbx+00000268],3F800000
hnk.exe+1ECD71: EB 7C                          - jmp hnk.exe+1ECDEF
hnk.exe+1ECD73: F3 0F 10 44 24 60              - movss xmm0,[rsp+60]

// ORIGINAL CODE - INJECTION POINT: hnk.exe+1CBAF0

hnk.exe+1CBAC2: F3 0F 5C C8              - subss xmm1,xmm0
hnk.exe+1CBAC6: F3 44 0F 5C C1           - subss xmm8,xmm1
hnk.exe+1CBACB: 41 0F 28 C0              - movaps xmm0,xmm8
hnk.exe+1CBACF: E8 2C AD 01 00           - call hnk.exe+1E6800
hnk.exe+1CBAD4: 0F 10 0F                 - movups xmm1,[rdi]
hnk.exe+1CBAD7: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1CBADB: 0F C6 C8 50              - shufps xmm1,xmm0,50
hnk.exe+1CBADF: 0F C6 0F EC              - shufps xmm1,[rdi],-14
hnk.exe+1CBAE3: E9 E0 00 00 00           - jmp hnk.exe+1CBBC8
hnk.exe+1CBAE8: 48 83 B8 80 00 00 00 00  - cmp qword ptr [rax+00000080],00
// ---------- INJECTING HERE ----------
hnk.exe+1CBAF0: F3 0F 10 8B 58 01 00 00  - movss xmm1,[rbx+00000158]
hnk.exe+1CBAF8: F3 0F 10 83 54 01 00 00  - movss xmm0,[rbx+00000154]
// ---------- DONE INJECTING  ----------
hnk.exe+1CBB00: 74 60                    - je hnk.exe+1CBB62
hnk.exe+1CBB02: F3 44 0F 5D C9           - minss xmm9,xmm1
hnk.exe+1CBB07: F3 41 0F 5F C1           - maxss xmm0,xmm9
hnk.exe+1CBB0C: E8 EF AC 01 00           - call hnk.exe+1E6800
hnk.exe+1CBB11: 0F 10 37                 - movups xmm6,[rdi]
hnk.exe+1CBB14: F3 0F 10 F0              - movss xmm6,xmm0
hnk.exe+1CBB18: 0F 11 37                 - movups [rdi],xmm6
hnk.exe+1CBB1B: 80 BB ED 01 00 00 00     - cmp byte ptr [rbx+000001ED],00
hnk.exe+1CBB22: 74 0C                    - je hnk.exe+1CBB30
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable Field Min Z"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(minZ_aob,hnk.exe,66 0F 7F 4C 24 60 F3 0F 10) // should be unique
registersymbol(minZ_aob)

minZ_aob:
  db 90 90 90 90 90 90

[DISABLE]

minZ_aob:
  db 66 0F 7F 4C 24 60

unregistersymbol(minZ_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EEB26

hnk.exe+1EEB00: 0F 5C C1                 - subps xmm0,xmm1
hnk.exe+1EEB03: 66 0F 7F 8D F0 09 00 00  - movdqa [rbp+000009F0],xmm1
hnk.exe+1EEB0B: 0F 2F D0                 - comiss xmm2,xmm0
hnk.exe+1EEB0E: 76 1C                    - jna hnk.exe+1EEB2C
hnk.exe+1EEB10: F3 0F 58 CA              - addss xmm1,xmm2
hnk.exe+1EEB14: 0F 28 C1                 - movaps xmm0,xmm1
hnk.exe+1EEB17: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1EEB1B: 0F 28 CE                 - movaps xmm1,xmm6
hnk.exe+1EEB1E: 0F C6 C8 50              - shufps xmm1,xmm0,50
hnk.exe+1EEB22: 0F C6 CE EC              - shufps xmm1,xmm6,-14
// ---------- INJECTING HERE ----------
hnk.exe+1EEB26: 66 0F 7F 4C 24 60        - movdqa [rsp+60],xmm1
// ---------- DONE INJECTING  ----------
hnk.exe+1EEB2C: F3 0F 10 87 C8 0A 00 00  - movss xmm0,[rdi+00000AC8]
hnk.exe+1EEB34: F3 0F 11 85 D8 0B 00 00  - movss [rbp+00000BD8],xmm0
hnk.exe+1EEB3C: 44 0F 5C 87 90 01 00 00  - subps xmm8,[rdi+00000190]
hnk.exe+1EEB44: 48 8D 95 80 00 00 00     - lea rdx,[rbp+00000080]
hnk.exe+1EEB4B: 48 8D 8D 10 0A 00 00     - lea rcx,[rbp+00000A10]
hnk.exe+1EEB52: 44 0F 29 85 80 00 00 00  - movaps [rbp+00000080],xmm8
hnk.exe+1EEB5A: E8 91 46 F1 FF           - call hnk.exe+1031F0
hnk.exe+1EEB5F: 48 8D 95 80 00 00 00     - lea rdx,[rbp+00000080]
hnk.exe+1EEB66: 4C 8B C0                 - mov r8,rax
hnk.exe+1EEB69: 48 8D 8D 20 0A 00 00     - lea rcx,[rbp+00000A20]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>401</ID>
          <Description>"Enable no camera collision"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(field_camera_collider_aob,hnk.exe,0F 11 87 00 0A 00 00 0F 28) // should be unique
registersymbol(field_camera_collider_aob)

field_camera_collider_aob:
  db 90 90 90 90 90 90 90

[DISABLE]

field_camera_collider_aob:
  db 0F 11 87 00 0A 00 00

unregistersymbol(field_camera_collider_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1EEBC5

hnk.exe+1EEB89: F3 0F 10 85 C8 0B 00 00     - movss xmm0,[rbp+00000BC8]
hnk.exe+1EEB91: 0F C6 C0 00                 - shufps xmm0,xmm0,00
hnk.exe+1EEB95: 66 0F 70 C8 00              - pshufd xmm1,xmm000
hnk.exe+1EEB9A: 66 0F 70 05 DD 2C AF 00 00  - pshufd xmm0,[hnk.exe+CE1880]00
hnk.exe+1EEBA3: 0F 59 D9                    - mulps xmm3,xmm1
hnk.exe+1EEBA6: 0F 59 D8                    - mulps xmm3,xmm0
hnk.exe+1EEBA9: F3 0F 10 85 D8 0B 00 00     - movss xmm0,[rbp+00000BD8]
hnk.exe+1EEBB1: 0F 11 9F B0 01 00 00        - movups [rdi+000001B0],xmm3
hnk.exe+1EEBB8: F3 0F 11 87 38 0A 00 00     - movss [rdi+00000A38],xmm0
hnk.exe+1EEBC0: 0F 28 44 24 60              - movaps xmm0,[rsp+60]
// ---------- INJECTING HERE ----------
hnk.exe+1EEBC5: 0F 11 87 00 0A 00 00        - movups [rdi+00000A00],xmm0
// ---------- DONE INJECTING  ----------
hnk.exe+1EEBCC: 0F 28 4C 24 40              - movaps xmm1,[rsp+40]
hnk.exe+1EEBD1: 41 0F 11 0C 24              - movups [r12],xmm1
hnk.exe+1EEBD6: 41 0F 28 73 E8              - movaps xmm6,[r11-18]
hnk.exe+1EEBDB: 41 0F 28 7B D8              - movaps xmm7,[r11-28]
hnk.exe+1EEBE0: 45 0F 28 43 C8              - movaps xmm8,[r11-38]
hnk.exe+1EEBE5: 45 0F 28 4B B8              - movaps xmm9,[r11-48]
hnk.exe+1EEBEA: 45 0F 28 53 A8              - movaps xmm10,[r11-58]
hnk.exe+1EEBEF: 45 0F 28 5B 98              - movaps xmm11,[r11-68]
hnk.exe+1EEBF4: 45 0F 28 63 88              - movaps xmm12,[r11-78]
hnk.exe+1EEBF9: 45 0F 28 AB 78 FF FF FF     - movaps xmm13,[r11-00000088]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Hide Minimap"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(minimap_aob,hnk.exe,83 BB C0 01 00 00 01) // should be unique
registersymbol(minimap_aob)

minimap_aob:
  db 83 BB C0 01 00 00 02

[DISABLE]

minimap_aob:
  db 83 BB C0 01 00 00 01

unregistersymbol(minimap_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+316060

hnk.exe+316030: 0F BA F0 1F                    - btr eax,1F
hnk.exe+316034: 44 3B F0                       - cmp r14d,eax
hnk.exe+316037: 72 87                          - jb hnk.exe+315FC0
hnk.exe+316039: 48 8B BF 18 32 00 00           - mov rdi,[rdi+00003218]
hnk.exe+316040: 48 85 FF                       - test rdi,rdi
hnk.exe+316043: 0F 85 67 FF FF FF              - jne hnk.exe+315FB0
hnk.exe+316049: 4C 8D BE C0 1E 05 00           - lea r15,[rsi+00051EC0]
hnk.exe+316050: 48 8B 9E 08 CE 06 00           - mov rbx,[rsi+0006CE08]
hnk.exe+316057: 48 85 DB                       - test rbx,rbx
hnk.exe+31605A: 0F 84 88 00 00 00              - je hnk.exe+3160E8
// ---------- INJECTING HERE ----------
hnk.exe+316060: 83 BB C0 01 00 00 01           - cmp dword ptr [rbx+000001C0],01
// ---------- DONE INJECTING  ----------
hnk.exe+316067: 75 7F                          - jne hnk.exe+3160E8
hnk.exe+316069: 66 83 BB BE 01 00 00 02        - cmp word ptr [rbx+000001BE],02
hnk.exe+316071: 75 75                          - jne hnk.exe+3160E8
hnk.exe+316073: 48 8B 05 66 60 B6 00           - mov rax,[hnk.exe+E7C0E0]
hnk.exe+31607A: 48 83 B8 B0 48 00 00 00        - cmp qword ptr [rax+000048B0],00
hnk.exe+316082: 74 64                          - je hnk.exe+3160E8
hnk.exe+316084: 48 8D 8B 10 2C 00 00           - lea rcx,[rbx+00002C10]
hnk.exe+31608B: C7 81 30 01 00 00 39 8E E3 3F  - mov [rcx+00000130],3FE38E39
hnk.exe+316095: 48 8B 01                       - mov rax,[rcx]
hnk.exe+316098: FF 50 08                       - call qword ptr [rax+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Hide Field HUD"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(field_hud_aob,hnk.exe,F3 0F 11 87 E0 03 00 00) // should be unique
alloc(newmem,$1000,field_hud_aob)

label(code)
label(return)

newmem:
  pxor xmm0,xmm0
code:
  movss [rdi+000003E0],xmm0
  jmp return

field_hud_aob:
  jmp newmem
  nop 3
return:
registersymbol(field_hud_aob)

[DISABLE]

field_hud_aob:
  db F3 0F 11 87 E0 03 00 00

unregistersymbol(field_hud_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+326AED

hnk.exe+326AC4: 0F 57 0D B5 2A 8F 00           - xorps xmm1,[hnk.exe+C19580]
hnk.exe+326ACB: EB E5                          - jmp hnk.exe+326AB2
hnk.exe+326ACD: C7 87 E0 03 00 00 00 00 80 3F  - mov [rdi+000003E0],3F800000
hnk.exe+326AD7: 0F 28 CE                       - movaps xmm1,xmm6
hnk.exe+326ADA: 48 8B 07                       - mov rax,[rdi]
hnk.exe+326ADD: F3 0F 5D CE                    - minss xmm1,xmm6
hnk.exe+326AE1: 0F 57 C0                       - xorps xmm0,xmm0
hnk.exe+326AE4: B2 01                          - mov dl,01
hnk.exe+326AE6: 48 8B CF                       - mov rcx,rdi
hnk.exe+326AE9: F3 0F 5F C1                    - maxss xmm0,xmm1
// ---------- INJECTING HERE ----------
hnk.exe+326AED: F3 0F 11 87 E0 03 00 00        - movss [rdi+000003E0],xmm0
// ---------- DONE INJECTING  ----------
hnk.exe+326AF5: FF 90 A0 00 00 00              - call qword ptr [rax+000000A0]
hnk.exe+326AFB: 48 8B CF                       - mov rcx,rdi
hnk.exe+326AFE: 44 0F 28 C8                    - movaps xmm9,xmm0
hnk.exe+326B02: E8 B9 10 00 00                 - call hnk.exe+327BC0
hnk.exe+326B07: F3 44 0F 59 C8                 - mulss xmm9,xmm0
hnk.exe+326B0C: 48 8D 9F 38 03 00 00           - lea rbx,[rdi+00000338]
hnk.exe+326B13: 45 33 E4                       - xor r12d,r12d
hnk.exe+326B16: BE 07 00 00 00                 - mov esi,00000007
hnk.exe+326B1B: 0F 1F 44 00 00                 - nop dword ptr [rax+rax+00]
hnk.exe+326B20: 48 8B 0B                       - mov rcx,[rbx]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Disable Dialogue"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(dialogue_aob,hnk.exe,0F 11 4B 60 80 BB 3C 01 00 00 0D) // should be unique
alloc(newmem,$1000,dialogue_aob)

label(code)
label(return)

newmem:
  pxor xmm1,xmm1

code:
  movups [rbx+60],xmm1
  cmp byte ptr [rbx+0000013C],0D
  jmp return

dialogue_aob:
  jmp newmem
  nop 6
return:
registersymbol(dialogue_aob)

[DISABLE]

dialogue_aob:
  db 0F 11 4B 60 80 BB 3C 01 00 00 0D

unregistersymbol(dialogue_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+6E6840

hnk.exe+6E680D: FF 90 88 00 00 00     - call qword ptr [rax+00000088]
hnk.exe+6E6813: 48 8B 0D C6 58 79 00  - mov rcx,[hnk.exe+E7C0E0]
hnk.exe+6E681A: 48 8B B1 F8 51 00 00  - mov rsi,[rcx+000051F8]
hnk.exe+6E6821: 48 85 F6              - test rsi,rsi
hnk.exe+6E6824: 75 07                 - jne hnk.exe+6E682D
hnk.exe+6E6826: 48 8B B1 B8 51 00 00  - mov rsi,[rcx+000051B8]
hnk.exe+6E682D: 0F 28 0D 5C E0 5E 00  - movaps xmm1,[hnk.exe+CD4890]
hnk.exe+6E6834: 0F 28 C1              - movaps xmm0,xmm1
hnk.exe+6E6837: 0F C6 43 60 FA        - shufps xmm0,[rbx+60],-06
hnk.exe+6E683C: 0F C6 C8 C4           - shufps xmm1,xmm0,-3C
// ---------- INJECTING HERE ----------
hnk.exe+6E6840: 0F 11 4B 60           - movups [rbx+60],xmm1
// ---------- DONE INJECTING  ----------
hnk.exe+6E6844: 80 BB 3C 01 00 00 0D  - cmp byte ptr [rbx+0000013C],0D
hnk.exe+6E684B: 74 17                 - je hnk.exe+6E6864
hnk.exe+6E684D: 48 8B 03              - mov rax,[rbx]
hnk.exe+6E6850: 4C 8D 43 60           - lea r8,[rbx+60]
hnk.exe+6E6854: 48 8B D6              - mov rdx,rsi
hnk.exe+6E6857: 48 8B CB              - mov rcx,rbx
hnk.exe+6E685A: FF 50 38              - call qword ptr [rax+38]
hnk.exe+6E685D: 48 8B 0D 7C 58 79 00  - mov rcx,[hnk.exe+E7C0E0]
hnk.exe+6E6864: 48 C7 C0 FF FF FF FF  - mov rax,FFFFFFFFFFFFFFFF
hnk.exe+6E686B: 0F 1F 44 00 00        - nop dword ptr [rax+rax+00]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"Dev Stuff"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1001</ID>
          <Description>"Camera Status"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(camera_aob,hnk.exe,48 8D 8B E0 09 00 00 0F 28) // should be unique
alloc(newmem,$1000,camera_aob)
alloc(camerastatus,8)

label(code)
label(return)

registersymbol(camera_aob)
registersymbol(camerastatus)

newmem:
  mov [camerastatus],rbx

code:
  lea rcx,[rbx+000009E0]
  jmp return

camera_aob:
  jmp newmem
  nop 2
return:

[DISABLE]

camera_aob:
  db 48 8D 8B E0 09 00 00

unregistersymbol(camera_aob)
unregistersymbol(camerastatus)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+1ED0A6

hnk.exe+1ED07B: 0F 14 DF                 - unpcklps xmm3,xmm7
hnk.exe+1ED07E: 0F 14 E6                 - unpcklps xmm4,xmm6
hnk.exe+1ED081: 45 33 C9                 - xor r9d,r9d
hnk.exe+1ED084: 0F 16 E3                 - movlhps xmm4,xmm3
hnk.exe+1ED087: 0F 28 D7                 - movaps xmm2,xmm7
hnk.exe+1ED08A: 48 8B CB                 - mov rcx,rbx
hnk.exe+1ED08D: 0F 29 A4 24 80 00 00 00  - movaps [rsp+00000080],xmm4
hnk.exe+1ED095: 66 89 74 24 20           - mov [rsp+20],si
hnk.exe+1ED09A: E8 51 D1 FF FF           - call hnk.exe+1EA1F0
hnk.exe+1ED09F: 0F 10 8B 10 0A 00 00     - movups xmm1,[rbx+00000A10]
// ---------- INJECTING HERE ----------
hnk.exe+1ED0A6: 48 8D 8B E0 09 00 00     - lea rcx,[rbx+000009E0]
// ---------- DONE INJECTING  ----------
hnk.exe+1ED0AD: 0F 28 C6                 - movaps xmm0,xmm6
hnk.exe+1ED0B0: 0F 28 D1                 - movaps xmm2,xmm1
hnk.exe+1ED0B3: 0F C6 C0 00              - shufps xmm0,xmm0,00
hnk.exe+1ED0B7: 0F C6 D0 50              - shufps xmm2,xmm0,50
hnk.exe+1ED0BB: 0F C6 D1 EC              - shufps xmm2,xmm1,-14
hnk.exe+1ED0BF: F3 41 0F 10 D7           - movss xmm2,xmm15
// ---------- RBX points to the camera module
hnk.exe+1ED0C4: 0F 11 93 10 0A 00 00     - movups [rbx+00000A10],xmm2
// ----------
hnk.exe+1ED0CB: E8 E0 AA FF FF           - call hnk.exe+1E7BB0
hnk.exe+1ED0D0: 0F 28 B4 24 20 01 00 00  - movaps xmm6,[rsp+00000120]
hnk.exe+1ED0D8: 41 0F B6 C5              - movzx eax,r13l
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>10011</ID>
              <Description>"Tilt"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10012</ID>
              <Description>"Pan"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A14</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10013</ID>
              <Description>"Roll"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>A18</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10014</ID>
              <Description>"Camera Target X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B20</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10015</ID>
              <Description>"Camera Target Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B28</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10016</ID>
              <Description>"Camera Target Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B24</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10017</ID>
              <Description>"Camera X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10018</ID>
              <Description>"Camera Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B38</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10019</ID>
              <Description>"Camera Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>camerastatus</Address>
              <Offsets>
                <Offset>B34</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1002</ID>
          <Description>"Player Status"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(player_location_aob,hnk.exe,0F 10 97 80 03 00 00 0F) // should be unique
alloc(newmem,$1000,player_location_aob)

label(code)
label(player_location)
label(return)

registersymbol(player_location_aob)
registersymbol(player_location)

newmem:
  mov [player_location],rdi
code:
  movups xmm2,[rdi+00000380]
  jmp return

player_location:
  dd #0

player_location_aob:
  jmp newmem
  nop 2
return:

[DISABLE]

player_location_aob:
  db 0F 10 97 80 03 00 00

unregistersymbol(player_location_aob)
unregistersymbol(player_location)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: hnk.exe+2F556C

hnk.exe+2F5532: 48 8D 2D 67 4D B9 00           - lea rbp,[hnk.exe+E8A2A0]
hnk.exe+2F5539: 49 89 73 18                    - mov [r11+18],rsi
hnk.exe+2F553D: 4C 8B 99 40 10 00 00           - mov r11,[rcx+00001040]
hnk.exe+2F5544: 8B F0                          - mov esi,eax
hnk.exe+2F5546: 66 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
hnk.exe+2F5550: 49 8B 03                       - mov rax,[r11]
hnk.exe+2F5553: F7 80 28 0A 00 00 21 00 20 00  - test [rax+00000A28],00200021
hnk.exe+2F555D: 0F 85 34 01 00 00              - jne hnk.exe+2F5697
hnk.exe+2F5563: 48 3B F8                       - cmp rdi,rax
hnk.exe+2F5566: 0F 84 2B 01 00 00              - je hnk.exe+2F5697
// ---------- INJECTING HERE ----------
hnk.exe+2F556C: 0F 10 97 80 03 00 00           - movups xmm2,[rdi+00000380]
// ---------- DONE INJECTING  ----------
hnk.exe+2F5573: 0F 28 EA                       - movaps xmm5,xmm2
hnk.exe+2F5576: 0F 5C A8 80 03 00 00           - subps xmm5,[rax+00000380]
hnk.exe+2F557D: 0F 28 CD                       - movaps xmm1,xmm5
hnk.exe+2F5580: 0F 59 CD                       - mulps xmm1,xmm5
hnk.exe+2F5583: 0F 28 F9                       - movaps xmm7,xmm1
hnk.exe+2F5586: 0F 28 C1                       - movaps xmm0,xmm1
hnk.exe+2F5589: 0F C6 C1 00                    - shufps xmm0,xmm1,00
hnk.exe+2F558D: 0F C6 F9 55                    - shufps xmm7,xmm1,55
hnk.exe+2F5591: 0F 58 F8                       - addps xmm7,xmm0
hnk.exe+2F5594: 0F C6 C9 AA                    - shufps xmm1,xmm1,-56
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>10021</ID>
              <Description>"Player X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>380</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10022</ID>
              <Description>"Player Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>388</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10023</ID>
              <Description>"Player Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>player_location</Address>
              <Offsets>
                <Offset>384</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <Comments>Based on the script by Cyber for Trails of Cold Steel IV
</Comments>
</CheatTable>