<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Free Camera (Num 0 Toggle)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(speedModifier,8)
speedModifier:
dd (float)3
globalalloc(useMouse,8)
useMouse:
dd (float)1 // 1 to use mouse, 0 to not use mouse
globalalloc(mouseSensitivity,8)
mouseSensitivity:
dd (float)8

aobscanmodule(cameracoordinates_aob,kuro.exe,48 8B 8F 90 06 00 00 8B 84 3E C8) // should be unique
aobscanmodule(moveplayer_aob,kuro.exe,FF 94 C3 F0 00 00 00 8B 84 BB 20) // should be unique
alloc(newmem,$100,cameracoordinates_aob)
alloc(cameracoordinates,$100,cameracoordinates_aob)
registersymbol(cameracoordinates_aob)
registersymbol(moveplayer_aob)
registersymbol(cameracoordinates)

label(code)
label(return)

newmem:

code:
  mov rcx,[rdi+00000690]
  mov [cameracoordinates],rcx
  jmp return

cameracoordinates_aob:
  jmp newmem
  nop 2
return:

cameracoordinates_aob+E:
  db 90 90 90 8B 84 3E CC 01 00 00 90 90 90 8B 84 3E D0 01 00 00 90 90 90 48 8B 8F 90 06 00 00 8B 84 3E 04 02 00 00 90 90 90 8B 84 3E 08 02 00 00 90 90 90 8B 84 3E 0C 02 00 00 90 90 90 8B 84 3E 40 02 00 00 48 8B 8F 90 06 00 00 90 90 90 8B 84 3E 44 02 00 00 90 90 90 8B 84 3E 48 02 00 00 90 90 90

moveplayer_aob:
  db 90 90 90 90 90 90 90

{$lua}

function checkKeys()
  if not (getForegroundProcess() == getOpenedProcessID()) then return end -- Only run if in game
  if (getAddressSafe("[cameracoordinates]")) then
    --Read and assign speed modifier value
    local speed = readFloat("speedModifier")
    local use_mouse = readFloat("useMouse")
    local mouse_speed = readFloat("mouseSensitivity")

    --Camera Coordinates
    local camx = readFloat("[cameracoordinates]+08") -- Camera X
    local camy = readFloat("[cameracoordinates]+10") -- Camera Y
    local camz = readFloat("[cameracoordinates]+0C") -- Camera Z

    --Target Coordinates
    local targetx = readFloat("[cameracoordinates]+18") -- Camera X
    local targety = readFloat("[cameracoordinates]+20") -- Camera Y
    local targetz = readFloat("[cameracoordinates]+1C") -- Camera Z

    --Prevent endless error loop if camera status is not initiated
    if (targetz == nil) or (targetz == camz and targetx == camx and targety == camy) then
      speed = 0
      camx = 0
      camy = 0
      camz = 0
      targetx = 0
      targety = 0
      targetz = 0
    else

      local new_mouse_x,new_mouse_y = getMousePos()
      local mouse_loaded = readInteger("cameracoordinates+38")

      --Initialize mouse coordinates on first run (if using mouse)
      if not (mouse_loaded == 1) and (use_mouse == 1) then
        new_mouse_x = getScreenWidth() / 2
        new_mouse_y = getScreenHeight() / 2
        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
        writeInteger("cameracoordinates+38",1)
      end

      --Measure mouse movement from previous cycle
      local mouse_move_x = new_mouse_x - getScreenWidth() / 2
      local mouse_move_y = new_mouse_y - getScreenHeight() / 2

      --Mouse Rotation in Radians
      --Use math.rad() to convert from degrees if game values aren't in radians
      local camdist = ((targetx - camx)^2 + (targety - camy)^2 + (targetz - camz)^2)^0.5
      local tilt = math.atan2(camz - targetz, ((targetx - camx)^2 + (targety - camy)^2)^0.5)
      local pan = math.atan2(targetx - camx, targety - camy) + math.rad(180) -- Horizontal (pan)

      --Sine and Cosine of Rotation Values
      local siny = math.sin(pan) -- Sine of Horizontal (pan)
      local cosy = math.cos(pan) -- Cosine of Horizontal (pan)
      local sinp = math.sin(tilt) -- Sine of Vertical (tilt)
      local cosp = math.cos(tilt) -- Cosine of Vertical (tilt)

      --Forward
      if isKeyPressed(VK_W) then
        camx = camx - (siny * speed * 0.03)
        camy = camy - (cosy * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Left
      if isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Back
      if isKeyPressed(VK_S) then
        camx = camx + (siny * speed * 0.03)
        camy = camy + (cosy * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Right
      if isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Forward/Right
      if isKeyPressed(VK_W) and isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Forward/Left
      if isKeyPressed(VK_W) and isKeyPressed(VK_A) then
        camx = camx - (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Back/Left
      if isKeyPressed(VK_S) and isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Back/Right
      if isKeyPressed(VK_S) and isKeyPressed(VK_D) then
        camx = camx + (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Up
      if isKeyPressed(VK_R) then
       camz = camz + (speed * 0.02)
      end
      --Down
      if isKeyPressed(VK_F) then
       camz = camz - (speed * 0.02)
      end
      --Pan right
      if isKeyPressed(VK_L) then
        pan = pan - speed * 0.01
      end
      --Pan left
      if isKeyPressed(VK_J) then
        pan = pan + speed * 0.01
      end
      --Tilt up
      if isKeyPressed(VK_I) then
        tilt = math.max(tilt - speed * 0.01, math.rad(-89.5))
      end
      --Tilt down
      if isKeyPressed(VK_K) then
        tilt = math.min(tilt + speed * 0.01, math.rad(89.5))
      end

      if (use_mouse == 1) then
        --Tilt by mouse
        if not(mouse_move_y == 0) then
          tilt = math.min(math.max(tilt + mouse_move_y * mouse_speed * 0.0003, math.rad(-89.5)), math.rad(89.5))
        end
        --Tilt by mouse
        if not(mouse_move_x == 0) then
          pan = pan - mouse_move_x * mouse_speed * 0.0003
        end

        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
      end

      --Create a copy of the entire memory block before alterations.  I do not know if +14, +24 or +34 are used, but this preserves them.
      copyMemory("[cameracoordinates]+08",48,"cameracoordinates+08")

      --Write new values into the temporary buffer
      writeFloat("cameracoordinates+08", camx)
      writeFloat("cameracoordinates+10", camy)
      writeFloat("cameracoordinates+0C", camz)
      writeFloat("cameracoordinates+18", camx - (camdist * math.cos(tilt) * math.sin(pan)))
      writeFloat("cameracoordinates+20", camy - (camdist * math.cos(tilt) * math.cos(pan)))
      writeFloat("cameracoordinates+1C", camz - (camdist * math.sin(tilt)))
      writeFloat("cameracoordinates+28", 0) --Anti-vomit settings
      writeFloat("cameracoordinates+2C", 1)
      writeFloat("cameracoordinates+30", 0)

      --Copy buffer back into memory read by game engine
      copyMemory("cameracoordinates+08",48,"[cameracoordinates]+08")
    end


    --Speed Modifiers
    if isKeyPressed(VK_F3) then --If F3 is pressed, quadruple the speed
      writeFloat("speedModifier", 12)
    elseif isKeyPressed(VK_F2) then --If F2 is pressed, double the speed
      writeFloat("speedModifier", 6)
    elseif isKeyPressed(VK_F1) then --If F1 is pressed, slow way down
      writeFloat("speedModifier", .5)
    else --If nothing is pressed, speed is normal
      writeFloat("speedModifier", 3)
    end

    --Mouse Support
    if isKeyPressed(VK_PRIOR) then --If Page Up is pressed, enable mouse
      writeFloat("useMouse", 1)
    elseif isKeyPressed(VK_NEXT) then --If Page Down is pressed, disable mouse
      writeFloat("useMouse", 0)
    end
  end
end

t=createTimer(nil)
timer_setInterval(t, 10)
timer_onTimer(t, checkKeys)
timer_setEnabled(t, true)

{$asm}

[DISABLE]
{$lua}

timer_setEnabled(t, false)

{$asm}
cameracoordinates_aob:
  db 48 8B 8F 90 06 00 00

cameracoordinates_aob+E:
  db 89 41 08 8B 84 3E CC 01 00 00 89 41 0C 8B 84 3E D0 01 00 00 89 41 10 48 8B 8F 90 06 00 00 8B 84 3E 04 02 00 00 89 41 18 8B 84 3E 08 02 00 00 89 41 1C 8B 84 3E 0C 02 00 00 89 41 20 8B 84 3E 40 02 00 00 48 8B 8F 90 06 00 00 89 41 28 8B 84 3E 44 02 00 00 89 41 2C 8B 84 3E 48 02 00 00 89 41 30

moveplayer_aob:
  db FF 94 C3 F0 00 00 00

unregistersymbol(cameracoordinates_aob)
unregistersymbol(moveplayer_aob)
unregistersymbol(cameracoordinates)
dealloc(cameracoordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+E3FFD

kuro.exe+E3FD3: F3 0F 58 78 04            - addss xmm7,[rax+04]
kuro.exe+E3FD8: F3 44 0F 58 40 08         - addss xmm8,[rax+08]
kuro.exe+E3FDE: F3 44 0F 58 48 0C         - addss xmm9,[rax+0C]
kuro.exe+E3FE4: 48 83 C3 40               - add rbx,40
kuro.exe+E3FE8: 48 3B DD                  - cmp rbx,rbp
kuro.exe+E3FEB: 75 C3                     - jne kuro.exe+E3FB0
kuro.exe+E3FED: 8B 87 34 07 00 00         - mov eax,[rdi+00000734]
kuro.exe+E3FF3: D1 E8                     - shr eax,1
kuro.exe+E3FF5: A8 01                     - test al,01
kuro.exe+E3FF7: 0F 85 0C 01 00 00         - jne kuro.exe+E4109
// ---------- INJECTING HERE ----------
kuro.exe+E3FFD: 48 8B 8F 90 06 00 00      - mov rcx,[rdi+00000690]
// ---------- DONE INJECTING ----------
kuro.exe+E4004: 8B 84 3E C8 01 00 00      - mov eax,[rsi+rdi+000001C8]
// ---------- INJECTING HERE ----------
kuro.exe+E400B: 89 41 08                  - mov [rcx+08],eax
kuro.exe+E400E: 8B 84 3E CC 01 00 00      - mov eax,[rsi+rdi+000001CC]
kuro.exe+E4015: 89 41 0C                  - mov [rcx+0C],eax
kuro.exe+E4018: 8B 84 3E D0 01 00 00      - mov eax,[rsi+rdi+000001D0]
kuro.exe+E401F: 89 41 10                  - mov [rcx+10],eax
kuro.exe+E4022: 48 8B 8F 90 06 00 00      - mov rcx,[rdi+00000690]
kuro.exe+E4029: 8B 84 3E 04 02 00 00      - mov eax,[rsi+rdi+00000204]
kuro.exe+E4030: 89 41 18                  - mov [rcx+18],eax
kuro.exe+E4033: 8B 84 3E 08 02 00 00      - mov eax,[rsi+rdi+00000208]
kuro.exe+E400E: 8B 84 3E CC 01 00 00      - mov eax,[rsi+rdi+000001CC]
kuro.exe+E4015: 89 41 0C                  - mov [rcx+0C],eax
kuro.exe+E4018: 8B 84 3E D0 01 00 00      - mov eax,[rsi+rdi+000001D0]
kuro.exe+E401F: 89 41 10                  - mov [rcx+10],eax
kuro.exe+E4022: 48 8B 8F 90 06 00 00      - mov rcx,[rdi+00000690]
kuro.exe+E4029: 8B 84 3E 04 02 00 00      - mov eax,[rsi+rdi+00000204]
kuro.exe+E4030: 89 41 18                  - mov [rcx+18],eax
kuro.exe+E4033: 8B 84 3E 08 02 00 00      - mov eax,[rsi+rdi+00000208]
kuro.exe+E403A: 89 41 1C                  - mov [rcx+1C],eax
kuro.exe+E403D: 8B 84 3E 0C 02 00 00      - mov eax,[rsi+rdi+0000020C]
kuro.exe+E4044: 89 41 20                  - mov [rcx+20],eax
kuro.exe+E4047: 8B 84 3E 40 02 00 00      - mov eax,[rsi+rdi+00000240]
kuro.exe+E404E: 48 8B 8F 90 06 00 00      - mov rcx,[rdi+00000690]
kuro.exe+E4055: 89 41 28                  - mov [rcx+28],eax
kuro.exe+E4058: 8B 84 3E 44 02 00 00      - mov eax,[rsi+rdi+00000244]
kuro.exe+E405F: 89 41 2C                  - mov [rcx+2C],eax
kuro.exe+E4062: 8B 84 3E 48 02 00 00      - mov eax,[rsi+rdi+00000248]
kuro.exe+E4069: 89 41 30                  - mov [rcx+30],eax
// ---------- DONE INJECTING ----------
kuro.exe+E406C: 83 BF 30 07 00 00 00      - cmp dword ptr [rdi+00000730],00
kuro.exe+E4073: 0F 10 84 3E 28 03 00 00   - movups xmm0,[rsi+rdi+00000328]
kuro.exe+E407B: 0F 11 44 24 20            - movups [rsp+20],xmm0
kuro.exe+E4080: 75 1D                     - jne kuro.exe+E409F
kuro.exe+E4082: E8 49 3A 3F 00            - call kuro.exe+4D7AD0
kuro.exe+E4087: F3 0F 10 80 64 03 00 00   - movss xmm0,[rax+00000364]
kuro.exe+E408F: F3 0F 5E 80 60 03 00 00   - divss xmm0,[rax+00000360]
kuro.exe+E4097: F3 0F 59 44 24 24         - mulss xmm0,[rsp+24]
kuro.exe+E409D: EB 06                     - jmp kuro.exe+E40A5
kuro.exe+E409F: F3 0F 10 44 24 28         - movss xmm0,[rsp+28]
kuro.exe+E40A5: 48 8B 87 90 06 00 00      - mov rax,[rdi+00000690]

// ORIGINAL CODE - INJECTION POINT: kuro.exe+22E8AD - Lock Player Movement

kuro.exe+22E872: 8B 84 BB 1C 02 00 00     - mov eax,[rbx+rdi*4+0000021C]
kuro.exe+22E879: 89 84 BB 18 02 00 00     - mov [rbx+rdi*4+00000218],eax
kuro.exe+22E880: 89 AC BB 20 02 00 00     - mov [rbx+rdi*4+00000220],ebp
kuro.exe+22E887: 89 83 5C 02 00 00        - mov [rbx+0000025C],eax
kuro.exe+22E88D: 48 63 84 BB 18 02 00 00  - movsxd  rax,dword ptr [rbx+rdi*4+00000218]
kuro.exe+22E895: 48 8B B4 24 F8 00 00 00  - mov rsi,[rsp+000000F8]
kuro.exe+22E89D: 83 F8 FF                 - cmp eax,-01
kuro.exe+22E8A0: 74 29                    - je kuro.exe+22E8CB
kuro.exe+22E8A2: 48 8B 8B E8 00 00 00     - mov rcx,[rbx+000000E8]
kuro.exe+22E8A9: 41 0F 28 C9              - movaps xmm1,xmm9
// ---------- INJECTING HERE ----------
kuro.exe+22E8AD: FF 94 C3 F0 00 00 00     - call qword ptr [rbx+rax*8+000000F0]
// ---------- DONE INJECTING  ----------
kuro.exe+22E8B4: 8B 84 BB 20 02 00 00     - mov eax,[rbx+rdi*4+00000220]
kuro.exe+22E8BB: FF C0                    - inc eax
kuro.exe+22E8BD: 41 3B C7                 - cmp eax,r15d
kuro.exe+22E8C0: 41 0F 4F C7              - cmovg eax,r15d
kuro.exe+22E8C4: 89 84 BB 20 02 00 00     - mov [rbx+rdi*4+00000220],eax
kuro.exe+22E8CB: 48 8B 03                 - mov rax,[rbx]
kuro.exe+22E8CE: 41 0F 28 C1              - movaps xmm0,xmm9
kuro.exe+22E8D2: F3 0F 58 83 58 02 00 00  - addss xmm0,[rbx+00000258]
kuro.exe+22E8DA: 48 8B CB                 - mov rcx,rbx
kuro.exe+22E8DD: F3 0F 11 83 58 02 00 00  - movss [rbx+00000258],xmm0
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>96</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Camera Coordinates"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Camera X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>08</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"Camera Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"Camera Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>0C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Camera Target X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>18</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"Camera Target Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>20</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Camera Target Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Set Custom Camera Distance (F4 Toggle)"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(fov_aob,kuro.exe,F3 0F 10 89 70 01 00 00 F2) // should be unique
aobscanmodule(unlockfov1_aob,kuro.exe,F3 0F 11 80 70 01 00 00 4C 89 B8 74 01 00 00 44 89 B8 7C 01 00 00 E9) // should be unique
aobscanmodule(unlock_dialogue_fov_aob,kuro.exe,F3 0F 11 80 70 01 00 00 4C 89 B8 74 01 00 00 44 89 B8 7C 01 00 00 44) // should be unique
aobscanmodule(unlockfov2_aob,kuro.exe,F3 0F 11 41 08 48 83 C4 30) // should be unique
alloc(newmem,$1000,fov_aob)
alloc(fov,8)
registersymbol(fov_aob)
registersymbol(fov)
registersymbol(fov_set)
registersymbol(fov_max)
registersymbol(unlockfov1_aob)
registersymbol(unlockfov2_aob)

label(code)
label(writecode)
label(dialoguezoomcode)
label(fov_set)
label(fov_step)
label(fov_min)
label(fov_max)
label(return)
label(writereturn)
label(dialoguezoomcodereturn)

newmem:

toggleon:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,23 //VK_END
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz toggleoff
  movss xmm1,[rcx+00000170]
  addss xmm1,[fov_step]
  minss xmm1,[fov_max]
  movss [fov_set],xmm1
  movss [rcx+00000170],xmm1
  jmp code

toggleoff:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,24 //VK_HOME
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz code
  movss xmm1,[rcx+00000170]
  subss xmm1,[fov_step]
  maxss xmm1,[fov_min]
  movss [fov_set],xmm1
  movss [rcx+00000170],xmm1

code:
  mov [fov],rcx
  movss xmm1,[rcx+00000170]
  jmp return

writecode:
  cmp [fov_set],(float)0
  je @f
  movss xmm0,[fov_set]
@@:
  movss [rax+00000170],xmm0
  jmp writereturn

dialoguezoomcode:
  cmp [fov_set],(float)0
  jne @f
  movss [rax+00000170],xmm0
@@:
  jmp dialoguezoomcodereturn

fov_set:
  dd (float)0

fov_step:
  dd (float)0.3

fov_min:
  dd (float)0.1

fov_max:
  dd (float)15

fov_aob:
  jmp newmem
  nop 3
return:

unlockfov1_aob:
  jmp writecode
  nop 3
writereturn:

unlock_dialogue_fov_aob:
  jmp dialoguezoomcode
  nop 3
dialoguezoomcodereturn:

unlockfov2_aob:
  db 90 90 90 90 90

[DISABLE]

fov_aob:
  db F3 0F 10 89 70 01 00 00

unlockfov1_aob:
  db F3 0F 11 80 70 01 00 00

unlock_dialogue_fov_aob:
  db F3 0F 11 80 70 01 00 00

unlockfov2_aob:
  db F3 0F 11 41 08

unregistersymbol(unlockfov1_aob)
unregistersymbol(unlockfov2_aob)
unregistersymbol(fov_aob)
unregistersymbol(fov)
unregistersymbol(fov_set)
unregistersymbol(fov_max)
dealloc(fov)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+E245C - Read FOV

kuro.exe+E242D: E8 7E 14 00 00           - call kuro.exe+E38B0
kuro.exe+E2432: 48 8B 4F 08              - mov rcx,[rdi+08]
kuro.exe+E2436: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+E2439: 48 81 C1 2C 01 00 00     - add rcx,0000012C
kuro.exe+E2440: E8 6B 14 00 00           - call kuro.exe+E38B0
kuro.exe+E2445: 48 8B 4F 08              - mov rcx,[rdi+08]
kuro.exe+E2449: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+E244C: 48 81 C1 68 01 00 00     - add rcx,00000168
kuro.exe+E2453: E8 58 50 F5 FF           - call kuro.exe+374B0
kuro.exe+E2458: 48 8B 4F 08              - mov rcx,[rdi+08]
// ---------- INJECTING HERE ----------
kuro.exe+E245C: F3 0F 10 89 70 01 00 00  - movss xmm1,[rcx+00000170]
// ---------- DONE INJECTING  ----------
kuro.exe+E2464: F2 0F 10 81 78 01 00 00  - movsd xmm0,[rcx+00000178]
kuro.exe+E246C: 0F 2E C9                 - ucomiss xmm1,xmm1
kuro.exe+E246F: F2 0F 11 45 C7           - movsd [rbp-39],xmm0
kuro.exe+E2474: 0F 9A C0                 - setp al
kuro.exe+E2477: 3C 01                    - cmp al,01
kuro.exe+E2479: 74 22                    - je kuro.exe+E249D
kuro.exe+E247B: F3 0F 10 89 70 01 00 00  - movss xmm1,[rcx+00000170]
kuro.exe+E2483: 0F 54 0D 16 98 70 00     - andps xmm1,[kuro.exe+7EBCA0]
kuro.exe+E248A: 0F 2F 0D EF 97 70 00     - comiss xmm1,[kuro.exe+7EBC80]
kuro.exe+E2491: F2 0F 11 45 C7           - movsd [rbp-39],xmm0

// ORIGINAL CODE - INJECTION POINT: kuro.exe+1F5016 - Unlock FOV1

kuro.exe+1F4FD1: 44 0F 28 9C 24 60 01 00 00  - movaps xmm11,[rsp+00000160]
kuro.exe+1F4FDA: 44 0F 28 94 24 70 01 00 00  - movaps xmm10,[rsp+00000170]
kuro.exe+1F4FE3: 0F 28 BC 24 A0 01 00 00     - movaps xmm7,[rsp+000001A0]
kuro.exe+1F4FEB: 4C 8B B4 24 C0 01 00 00     - mov r14,[rsp+000001C0]
kuro.exe+1F4FF3: 74 0D                       - je kuro.exe+1F5002
kuro.exe+1F4FF5: 44 39 BF 44 04 00 00        - cmp [rdi+00000444],r15d
kuro.exe+1F4FFC: 0F 84 F0 02 00 00           - je kuro.exe+1F52F2
kuro.exe+1F5002: 48 8B 47 08                 - mov rax,[rdi+08]
kuro.exe+1F5006: F3 0F 11 80 68 01 00 00     - movss [rax+00000168],xmm0
kuro.exe+1F500E: F3 0F 11 80 6C 01 00 00     - movss [rax+0000016C],xmm0
// ---------- INJECTING HERE ----------
kuro.exe+1F5016: F3 0F 11 80 70 01 00 00     - movss [rax+00000170],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+1F501E: 4C 89 B8 74 01 00 00        - mov [rax+00000174],r15
kuro.exe+1F5025: 44 89 B8 7C 01 00 00        - mov [rax+0000017C],r15d
kuro.exe+1F502C: E9 C1 02 00 00              - jmp kuro.exe+1F52F2
kuro.exe+1F5031: 48 8B 05 E0 84 71 00        - mov rax,[kuro.exe+90D518]
kuro.exe+1F5038: F6 80 0A 01 00 00 04        - test byte ptr [rax+0000010A],04
kuro.exe+1F503F: 74 36                       - je kuro.exe+1F5077
kuro.exe+1F5041: 41 0F 28 C9                 - movaps xmm1,xmm9
kuro.exe+1F5045: 48 8B CF                    - mov rcx,rdi
kuro.exe+1F5048: E8 A3 11 00 00              - call kuro.exe+1F61F0
kuro.exe+1F504D: 48 8B 47 08                 - mov rax,[rdi+08]

// ORIGINAL CODE - INJECTION POINT: kuro.exe+374CD - Unlock FOV2

kuro.exe+374AE: CC              - int 3
kuro.exe+374AF: CC              - int 3
kuro.exe+374B0: 40 53           - push rbx
kuro.exe+374B2: 48 83 EC 30     - sub rsp,30
kuro.exe+374B6: F3 0F 10 41 10  - movss xmm0,[rcx+10]
kuro.exe+374BB: 48 8B D9        - mov rbx,rcx
kuro.exe+374BE: F3 0F 10 51 0C  - movss xmm2,[rcx+0C]
kuro.exe+374C3: 0F 2F C2        - comiss xmm0,xmm2
kuro.exe+374C6: 72 10           - jb kuro.exe+374D8
kuro.exe+374C8: F3 0F 10 41 04  - movss xmm0,[rcx+04]
// ---------- INJECTING HERE ----------
kuro.exe+374CD: F3 0F 11 41 08  - movss [rcx+08],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+374D2: 48 83 C4 30     - add rsp,30
kuro.exe+374D6: 5B              - pop rbx
kuro.exe+374D7: C3              - ret
kuro.exe+374D8: 0F 29 74 24 20  - movaps [rsp+20],xmm6
kuro.exe+374DD: F3 0F 58 C1     - addss xmm0,xmm1
kuro.exe+374E1: 0F 28 F2        - movaps xmm6,xmm2
kuro.exe+374E4: F3 0F 5D F0     - minss xmm6,xmm0
kuro.exe+374E8: F3 0F 11 71 10  - movss [rcx+10],xmm6
kuro.exe+374ED: 8B 49 14        - mov ecx,[rcx+14]
kuro.exe+374F0: F3 0F 5E F2     - divss xmm6,xmm2

// ORIGINAL CODE - INJECTION POINT: kuro.exe+1F5061 - Prevent Dialogue FOV change

kuro.exe+1F502C: E9 C1 02 00 00           - jmp kuro.exe+1F52F2
kuro.exe+1F5031: 48 8B 05 E0 84 71 00     - mov rax,[kuro.exe+90D518]
kuro.exe+1F5038: F6 80 0A 01 00 00 04     - test byte ptr [rax+0000010A],04
kuro.exe+1F503F: 74 36                    - je kuro.exe+1F5077
kuro.exe+1F5041: 41 0F 28 C9              - movaps xmm1,xmm9
kuro.exe+1F5045: 48 8B CF                 - mov rcx,rdi
kuro.exe+1F5048: E8 A3 11 00 00           - call kuro.exe+1F61F0
kuro.exe+1F504D: 48 8B 47 08              - mov rax,[rdi+08]
kuro.exe+1F5051: F3 0F 11 80 68 01 00 00  - movss [rax+00000168],xmm0
kuro.exe+1F5059: F3 0F 11 80 6C 01 00 00  - movss [rax+0000016C],xmm0
// ---------- INJECTING HERE ----------
kuro.exe+1F5061: F3 0F 11 80 70 01 00 00  - movss [rax+00000170],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+1F5069: 4C 89 B8 74 01 00 00     - mov [rax+00000174],r15
kuro.exe+1F5070: 44 89 B8 7C 01 00 00     - mov [rax+0000017C],r15d
kuro.exe+1F5077: 44 39 BF 44 04 00 00     - cmp [rdi+00000444],r15d
kuro.exe+1F507E: 0F 84 6E 02 00 00        - je kuro.exe+1F52F2
kuro.exe+1F5084: 0F 10 97 98 00 00 00     - movups xmm2,[rdi+00000098]
kuro.exe+1F508B: 48 8B 47 08              - mov rax,[rdi+08]
kuro.exe+1F508F: 48 05 F0 00 00 00        - add rax,000000F0
kuro.exe+1F5095: 0F 10 E2                 - movups xmm4,xmm2
kuro.exe+1F5098: 0F 10 DA                 - movups xmm3,xmm2
kuro.exe+1F509B: 0F 28 C2                 - movaps xmm0,xmm2
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>115</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Home Key to Zoom In, End Key to Zoom Out"</Description>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>22</ID>
          <Description>"Current Camera Distance (read-only)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fov</Address>
          <Offsets>
            <Offset>170</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Custom Camera Distance"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fov_set</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Maximum Camera Distance"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fov_max</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Set Camera Min Z to Floor (Use No Clip)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(cameradistance_aob,kuro.exe,02 00 00 48 8B 47 08 F3 0F 11 80 68 01 00 00) // should be unique
alloc(newmem,$1000,cameradistance_aob)

label(code)
label(return)

newmem:

code:
  mov [rax+00000168],(float)5
  movss xmm0,[rax+00000168]
  movss [rax+00000168],xmm0
  jmp return

cameradistance_aob+07:
  jmp newmem
  nop 3
return:
registersymbol(cameradistance_aob)

[DISABLE]

cameradistance_aob+07:
  db F3 0F 11 80 68 01 00 00

unregistersymbol(cameradistance_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+1F5006

kuro.exe+1F4FBF: 44 0F 28 B4 24 30 01 00 00  - movaps xmm14,[rsp+00000130]
kuro.exe+1F4FC8: 44 0F 28 A4 24 50 01 00 00  - movaps xmm12,[rsp+00000150]
kuro.exe+1F4FD1: 44 0F 28 9C 24 60 01 00 00  - movaps xmm11,[rsp+00000160]
kuro.exe+1F4FDA: 44 0F 28 94 24 70 01 00 00  - movaps xmm10,[rsp+00000170]
kuro.exe+1F4FE3: 0F 28 BC 24 A0 01 00 00     - movaps xmm7,[rsp+000001A0]
kuro.exe+1F4FEB: 4C 8B B4 24 C0 01 00 00     - mov r14,[rsp+000001C0]
kuro.exe+1F4FF3: 74 0D                       - je kuro.exe+1F5002
kuro.exe+1F4FF5: 44 39 BF 44 04 00 00        - cmp [rdi+00000444],r15d
kuro.exe+1F4FFC: 0F 84 F0 02 00 00           - je kuro.exe+1F52F2
kuro.exe+1F5002: 48 8B 47 08                 - mov rax,[rdi+08]
// ---------- INJECTING HERE ----------
kuro.exe+1F5006: F3 0F 11 80 68 01 00 00     - movss [rax+00000168],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+1F500E: F3 0F 11 80 6C 01 00 00     - movss [rax+0000016C],xmm0
kuro.exe+1F5016: F3 0F 11 80 70 01 00 00     - movss [rax+00000170],xmm0
kuro.exe+1F501E: 4C 89 B8 74 01 00 00        - mov [rax+00000174],r15
kuro.exe+1F5025: 44 89 B8 7C 01 00 00        - mov [rax+0000017C],r15d
kuro.exe+1F502C: E9 C1 02 00 00              - jmp kuro.exe+1F52F2
kuro.exe+1F5031: 48 8B 05 E0 84 71 00        - mov rax,[kuro.exe+90D518]
kuro.exe+1F5038: F6 80 0A 01 00 00 04        - test byte ptr [rax+0000010A],04
kuro.exe+1F503F: 74 36                       - je kuro.exe+1F5077
kuro.exe+1F5041: 41 0F 28 C9                 - movaps xmm1,xmm9
kuro.exe+1F5045: 48 8B CF                    - mov rcx,rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"No Clip"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(noclip_aob,kuro.exe,F3 0F 11 83 C4 08 00 00) // should be unique
registersymbol(noclip_aob)

noclip_aob:
  db 90 90 90 90 90 90 90 90 72 3B 90 90 90 90 90 90

[DISABLE]

noclip_aob:
  db F3 0F 11 83 C4 08 00 00 72 3B 89 BB C4 08 00 00

unregistersymbol(noclip_aob)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+1B1BF5

kuro.exe+1B1BC9: 44 0F 2F E1                    - comiss xmm12,xmm1
kuro.exe+1B1BCD: 72 38                          - jb kuro.exe+1B1C07
kuro.exe+1B1BCF: F6 86 0A 01 00 00 08           - test byte ptr [rsi+0000010A],08
kuro.exe+1B1BD6: 74 08                          - je kuro.exe+1B1BE0
kuro.exe+1B1BD8: 89 BB C4 08 00 00              - mov [rbx+000008C4],edi
kuro.exe+1B1BDE: EB 5A                          - jmp kuro.exe+1B1C3A
kuro.exe+1B1BE0: 44 0F 2F F9                    - comiss xmm15,xmm1
kuro.exe+1B1BE4: F3 0F 10 83 C4 08 00 00        - movss xmm0,[rbx+000008C4]
kuro.exe+1B1BEC: F3 0F 5C C7                    - subss xmm0,xmm7
kuro.exe+1B1BF0: F3 41 0F 5F C2                 - maxss xmm0,xmm10
// ---------- INJECTING HERE ----------
kuro.exe+1B1BF5: F3 0F 11 83 C4 08 00 00        - movss [rbx+000008C4],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+1B1BFD: 72 3B                          - jb kuro.exe+1B1C3A
kuro.exe+1B1BFF: 89 BB C4 08 00 00              - mov [rbx+000008C4],edi
kuro.exe+1B1C05: EB 33                          - jmp kuro.exe+1B1C3A
kuro.exe+1B1C07: F6 86 0A 01 00 00 08           - test byte ptr [rsi+0000010A],08
kuro.exe+1B1C0E: 74 0C                          - je kuro.exe+1B1C1C
kuro.exe+1B1C10: C7 83 C4 08 00 00 00 00 80 3F  - mov [rbx+000008C4],3F800000
kuro.exe+1B1C1A: EB 1E                          - jmp kuro.exe+1B1C3A
kuro.exe+1B1C1C: F3 0F 58 BB C4 08 00 00        - addss xmm7,[rbx+000008C4]
kuro.exe+1B1C24: F3 41 0F 5D FD                 - minss xmm7,xmm13
kuro.exe+1B1C29: F3 0F 11 BB C4 08 00 00        - movss [rbx+000008C4],xmm7
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Force Pause Action (Enable first, F5 pause / F6 unpause)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(freezemonitorinjectionpoint_aob,kuro.exe,F3 0F 10 83 00 16 00 00) // should be unique
aobscanmodule(freezeaction_aob,kuro.exe,01 FF 50 18 48 8D 7F 08) // should be unique
aobscanmodule(freezeaction_aob2,kuro.exe,E8 E9 3C 1D 00) // should be unique
aobscanmodule(freezeaction_aob3,kuro.exe,E8 54 71 3C 00) // should be unique
aobscanmodule(cutscenefreeze_aob,kuro.exe,48 8B 01 FF 50 20 48 8D) // should be unique
aobscanmodule(cutscenefreeze_aob2,kuro.exe,0F 85 0C 01 00 00 48 8B 8F) // should be unique
alloc(newmem,$1000,freezeaction_aob)
registersymbol(freezemonitorinjectionpoint_aob)
registersymbol(freezeaction_aob)
registersymbol(freezeaction_aob2)
registersymbol(freezeaction_aob3)
registersymbol(cutscenefreeze_aob)
registersymbol(cutscenefreeze_aob2)
registersymbol(freeze)

label(toggleon)
label(toggleoff)
label(code)
label(code1)
label(code2)
label(code3)
label(code4)
label(code5)
label(freeze)
label(return)
label(return1)
label(return2)
label(return3)
label(return4)
label(return5)

newmem:

toggleon:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,74 //VK_F5
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz toggleoff
  mov [freeze],#1
  jmp code

toggleoff:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,75 //VK_F6
  call GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  test ax,8001
  pop rax
  jz code
  mov [freeze],#0

code:
  movss xmm0,[rbx+00001600]
  jmp return

code1:
  pushf
  cmp [freeze],#0
  je @f
  popf
  lea rdi,[rdi+08]
  jmp return1
@@:
  popf
  call qword ptr [rax+18]
  lea rdi,[rdi+08]
  jmp return1

code2:
  cmp [freeze],#0
  jne @f
  call kuro.exe+209040
@@:
  jmp return2

code3:
  cmp [freeze],#0
  jne @f
  call kuro.exe+3FC580
@@:
  jmp return3

code4:
  cmp [freeze],#0
  jne @f
  mov rax,[rcx]
  call qword ptr [rax+20]
@@:
  jmp return4

code5:
  pushf
  cmp [freeze],#0
  je @f
  popf
  jmp return5
@@:
  popf
  jne kuro.exe+E4109
  jmp return5

freeze:
  dd #0

freezemonitorinjectionpoint_aob:
  jmp newmem
  nop 3
return:

freezeaction_aob+01:
  jmp code1
  nop 2
return1:

freezeaction_aob2:
  jmp code2
return2:

freezeaction_aob3:
  jmp code3
return3:

cutscenefreeze_aob:
  jmp code4
  nop
return4:

cutscenefreeze_aob2:
  jmp code5
  nop
return5:

[DISABLE]

freezemonitorinjectionpoint_aob:
  db F3 0F 10 83 00 16 00 00

freezeaction_aob+01:
  db FF 50 18 48 8D 7F 08

freezeaction_aob2:
  db E8 E9 3C 1D 00

freezeaction_aob3:
  db E8 54 71 3C 00

cutscenefreeze_aob:
  db 48 8B 01 FF 50 20

cutscenefreeze_aob2:
  db 0F 85 0C 01 00 00

unregistersymbol(freezemonitorinjectionpoint_aob)
unregistersymbol(freezeaction_aob)
unregistersymbol(freezeaction_aob2)
unregistersymbol(freezeaction_aob3)
unregistersymbol(cutscenefreeze_aob)
unregistersymbol(cutscenefreeze_aob2)
unregistersymbol(freeze)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+352B4 - Safe injection point to check keypresses

kuro.exe+35284: 0F 29 7C 24 50           - movaps [rsp+50],xmm7
kuro.exe+35289: 0F 28 F9                 - movaps xmm7,xmm1
kuro.exe+3528C: 44 0F 29 44 24 40        - movaps [rsp+40],xmm8
kuro.exe+35292: 44 0F 29 4C 24 30        - movaps [rsp+30],xmm9
kuro.exe+35298: 44 0F 28 C9              - movaps xmm9,xmm1
kuro.exe+3529C: E8 DF 24 23 00           - call kuro.exe+267780
kuro.exe+352A1: 48 8B 8B A8 01 00 00     - mov rcx,[rbx+000001A8]
kuro.exe+352A8: F3 0F 59 F8              - mulss xmm7,xmm0
kuro.exe+352AC: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+352AF: E8 2C 24 23 00           - call kuro.exe+2676E0
// ---------- INJECTING HERE ----------
kuro.exe+352B4: F3 0F 10 83 00 16 00 00  - movss xmm0,[rbx+00001600]
// ---------- DONE INJECTING  ----------
kuro.exe+352BC: 0F 28 F7                 - movaps xmm6,xmm7
kuro.exe+352BF: F3 0F 59 B3 E8 15 00 00  - mulss xmm6,[rbx+000015E8]
kuro.exe+352C7: 45 0F 57 C0              - xorps xmm8,xmm8
kuro.exe+352CB: 41 0F 2F C0              - comiss xmm0,xmm8
kuro.exe+352CF: F3 0F 11 BB DC 15 00 00  - movss [rbx+000015DC],xmm7
kuro.exe+352D7: 76 07                    - jna kuro.exe+352E0
kuro.exe+352D9: 0F 28 F0                 - movaps xmm6,xmm0
kuro.exe+352DC: F3 0F 59 F7              - mulss xmm6,xmm7
kuro.exe+352E0: 80 BB 10 16 00 00 00     - cmp byte ptr [rbx+00001610],00
kuro.exe+352E7: F3 0F 11 7C 24 20        - movss [rsp+20],xmm7

// ORIGINAL CODE - INJECTION POINT: kuro.exe+35329 - Freeze action

kuro.exe+352ED: F3 0F11 74 24 24         - movss [rsp+24],xmm6
kuro.exe+352F3: 75 51                    - jne kuro.exe+35346
kuro.exe+352F5: 48 89 B4 24 90 00 00 00  - mov [rsp+00000090],rsi
kuro.exe+352FD: BE 0A000000              - mov esi,0000000A
kuro.exe+35302: 48 89 BC 24 98 00 00 00  - mov [rsp+00000098],rdi
kuro.exe+3530A: 48 8B 3D 07 82 8D 00     - mov rdi,[kuro.exe+90D518]
kuro.exe+35311: 48 81 C7 88 16 01 00     - add rdi,00011688
kuro.exe+35318: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
kuro.exe+35320: 48 8B 0F                 - mov rcx,[rdi]
kuro.exe+35323: 0F 28 CE                 - movaps xmm1,xmm6
kuro.exe+35326: 48 8B 01                 - mov rax,[rcx]
// ---------- INJECTING HERE ----------
kuro.exe+35329: FF 50 18                 - call qword ptr [rax+18]
// ---------- DONE INJECTING ----------
kuro.exe+3532C: 48 8D 7F 08              - lea rdi,[rdi+08]
kuro.exe+35330: 48 83 EE 01              - sub rsi,01
kuro.exe+35334: 75 EA                    - jne kuro.exe+35320
kuro.exe+35336: 48 8B BC 24 98 00 00 00  - mov rdi,[rsp+00000098]
kuro.exe+3533E: 48 8B B4 24 90 00 00 00  - mov rsi,[rsp+00000090]
kuro.exe+35346: 48 8B 0D 6B 81 8D 00     - mov rcx,[kuro.exe+90D4B8]
kuro.exe+3534D: 48 8D 54 24 20           - lea rdx,[rsp+20]
// ---------- INJECTING HERE ----------
kuro.exe+35352: E8 79 39 1D 00           - call kuro.exe+208CD0
// ---------- DONE INJECTING ----------
kuro.exe+35357: 48 8B 05 5A 81 8D 00     - mov rax,[kuro.exe+90D4B8]
kuro.exe+3535E: 32 D2                    - xor dl,dl
kuro.exe+35360: 48 8B 80 70 05 00 00     - mov rax,[rax+00000570]
kuro.exe+35367: 48 85 C0                 - test rax,rax
kuro.exe+3536A: 74 1F                    - je kuro.exe+3538B
kuro.exe+3536C: 48 8B 80 10 02 00 00     - mov rax,[rax+00000210]
kuro.exe+35373: 48 85 C0                 - test rax,rax
kuro.exe+35376: 74 13                    - je kuro.exe+3538B
kuro.exe+35378: 48 8B 90 58 01 00 00     - mov rdx,[rax+00000158]
kuro.exe+3537F: 48 85 D2                 - test rdx,rdx
kuro.exe+35382: 74 07                    - je kuro.exe+3538B
kuro.exe+35384: 0F B6 92 D2 03 00 00     - movzx edx,byte ptr [rdx+000003D2]
kuro.exe+3538B: 80 BB 18 16 00 00 00     - cmp byte ptr [rbx+00001618],00
kuro.exe+35392: 74 09                    - je kuro.exe+3539D
kuro.exe+35394: B2 01                    - mov dl,01
kuro.exe+35396: C6 83 18 16 00 00 00     - mov byte ptr [rbx+00001618],00
kuro.exe+3539D: 80 BB 10 16 00 00 00     - cmp byte ptr [rbx+00001610],00
kuro.exe+353A4: 75 27                    - jne kuro.exe+353CD
kuro.exe+353A6: 48 8B 05 0B 81 8D 00     - mov rax,[kuro.exe+90D4B8]
kuro.exe+353AD: 0F B6 88 F8 19 00 00     - movzx ecx,byte ptr [rax+000019F8]
kuro.exe+353B4: 84 C9                    - test cl,cl
kuro.exe+353B6: 75 15                    - jne kuro.exe+353CD
kuro.exe+353B8: 48 8B 0D C9 80 8D 00     - mov rcx,[kuro.exe+90D488]
kuro.exe+353BF: F6 81 34 07 00 00 01     - test byte ptr [rcx+00000734],01
kuro.exe+353C6: 74 29                    - je kuro.exe+353F1
kuro.exe+353C8: 0F 28 CE                 - movaps xmm1,xmm6
kuro.exe+353CB: EB 18                    - jmp kuro.exe+353E5
kuro.exe+353CD: 84 D2                    - test dl,dl
kuro.exe+353CF: 74 20                    - je kuro.exe+353F1
kuro.exe+353D1: 48 8B 0D B0 80 8D 00     - mov rcx,[kuro.exe+90D488]
kuro.exe+353D8: F6 81 34 07 00 00 01     - test byte ptr [rcx+00000734],01
kuro.exe+353DF: 74 10                    - je kuro.exe+353F1
kuro.exe+353E1: 41 0F 28 C8              - movaps xmm1,xmm8
kuro.exe+353E5: 44 8B 81 30 07 00 00     - mov r8d,[rcx+00000730]
kuro.exe+353EC: E8 2F EB 0A 00           - call kuro.exe+E3F20
kuro.exe+353F1: 48 8B 0D C0 80 8D 00     - mov rcx,[kuro.exe+90D4B8]
kuro.exe+353F8: 0F 28 CE                 - movaps xmm1,xmm6
kuro.exe+353FB: E8 50 41 1D 00           - call kuro.exe+209550
kuro.exe+35400: 48 8B 0D 51 81 8D 00     - mov rcx,[kuro.exe+90D558]
kuro.exe+35407: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+3540A: E8 21 E3 37 00           - call kuro.exe+3B3730
kuro.exe+3540F: 4C 8B 05 72 80 8D 00     - mov r8,[kuro.exe+90D488]
kuro.exe+35416: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+35419: 48 8B 0D C8 99 8D 00     - mov rcx,[kuro.exe+90EDE8]
kuro.exe+35420: 4D 8B 80 90 06 00 00     - mov r8,[r8+00000690]
// ---------- INJECTING HERE ----------
kuro.exe+35427: E8 04 6F 3C 00           - call kuro.exe+3FC330
// ---------- DONE INJECTING ----------
kuro.exe+3542C: 48 8B 0D ED 80 8D 00     - mov rcx,[kuro.exe+90D520]
kuro.exe+35433: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+35436: E8 D5 C5 33 00           - call kuro.exe+371A10
kuro.exe+3543B: 48 8B 0D CE 80 8D 00     - mov rcx,[kuro.exe+90D510]
kuro.exe+35442: 41 0F 28 C9              - movaps xmm1,xmm9
kuro.exe+35446: E8 25 FD 2A 00           - call kuro.exe+2E5170
kuro.exe+3544B: 48 8B 0D 16 80 8D 00     - mov rcx,[kuro.exe+90D468]
kuro.exe+35452: 0F 28 CF                 - movaps xmm1,xmm7
kuro.exe+35455: E8 06 7E FF FF           - call kuro.exe+2D260
kuro.exe+3545A: 48 8B 0D 07 80 8D 00     - mov rcx,[kuro.exe+90D468]

// ORIGINAL CODE - INJECTION POINT: kuro.exe+E3F7A - Prevent cutsccene from taking camera control

kuro.exe+E3F4D: 48 8B 05 AC 48 7A 00     - mov rax,[kuro.exe+888800]
kuro.exe+E3F54: 48 33 C4                 - xor rax,rsp
kuro.exe+E3F57: 48 89 44 24 48           - mov [rsp+48],rax
kuro.exe+E3F5C: 49 63 C0                 - movsxd  rax,r8d
kuro.exe+E3F5F: 48 8B F9                 - mov rdi,rcx
kuro.exe+E3F62: 48 69 F0 A0 01 00 00     - imul rsi,rax,000001A0
kuro.exe+E3F69: 44 0F 28 D9              - movaps xmm11,xmm1
kuro.exe+E3F6D: 48 8B 8C C1 98 06 00 00  - mov rcx,[rcx+rax*8+00000698]
kuro.exe+E3F75: 48 85 C9                 - test rcx,rcx
kuro.exe+E3F78: 74 06                    - je kuro.exe+E3F80
// ---------- INJECTING HERE ----------
kuro.exe+E3F7A: 48 8B 01                 - mov rax,[rcx]
// ---------- DONE INJECTING  ----------
kuro.exe+E3F7D: FF 50 20                 - call qword ptr [rax+20]
kuro.exe+E3F80: 48 8D 9F B0 06 00 00     - lea rbx,[rdi+000006B0]
kuro.exe+E3F87: 45 32 F6                 - xor r14l,r14l
kuro.exe+E3F8A: 48 8D AB 80 00 00 00     - lea rbp,[rbx+00000080]
kuro.exe+E3F91: 45 0F 57 D2              - xorps xmm10,xmm10
kuro.exe+E3F95: 0F 57 F6                 - xorps xmm6,xmm6
kuro.exe+E3F98: 0F 57 FF                 - xorps xmm7,xmm7
kuro.exe+E3F9B: 45 0F 57 C0              - xorps xmm8,xmm8
kuro.exe+E3F9F: 45 0F 57 C9              - xorps xmm9,xmm9
kuro.exe+E3FA3: 48 3B DD                 - cmp rbx,rbp
kuro.exe+E3FA6: 74 45                    - je kuro.exe+E3FED
kuro.exe+E3FA8: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
kuro.exe+E3FB0: F3 0F 10 43 04           - movss xmm0,[rbx+04]
kuro.exe+E3FB5: 41 0F 2F C2              - comiss xmm0,xmm10
kuro.exe+E3FB9: 76 29                    - jna kuro.exe+E3FE4
kuro.exe+E3FBB: 41 0F 28 D3              - movaps xmm2,xmm11
kuro.exe+E3FBF: 48 8D 54 24 20           - lea rdx,[rsp+20]
kuro.exe+E3FC4: 48 8B CB                 - mov rcx,rbx
kuro.exe+E3FC7: E8 34 97 2E 00           - call kuro.exe+3CD700
kuro.exe+E3FCC: 41 B6 01                 - mov r14l,01
kuro.exe+E3FCF: F3 0F 58 30           - addss xmm6,[rax]
kuro.exe+E3FD3: F3 0F 58 78 04        - addss xmm7,[rax+04]
kuro.exe+E3FD8: F3 44 0F 58 40 08     - addss xmm8,[rax+08]
kuro.exe+E3FDE: F3 44 0F 58 48 0C     - addss xmm9,[rax+0C]
kuro.exe+E3FE4: 48 83 C3 40           - add rbx,40
kuro.exe+E3FE8: 48 3B DD              - cmp rbx,rbp
kuro.exe+E3FEB: 75 C3                 - jne kuro.exe+E3FB0
kuro.exe+E3FED: 8B 87 34 07 00 00     - mov eax,[rdi+00000734]
kuro.exe+E3FF3: D1 E8                 - shr eax,1
kuro.exe+E3FF5: A8 01                 - test al,01
// ---------- INJECTING HERE ----------
kuro.exe+E3FF7: 0F 85 0C 01 00 00     - jne kuro.exe+E4109
// ---------- DONE INJECTING  ----------
kuro.exe+E3FFD: 48 8B 8F 90 06 00 00  - mov rcx,[rdi+00000690]
kuro.exe+E4004: 8B 84 3E C8 01 00 00  - mov eax,[rsi+rdi+000001C8]
kuro.exe+E400B: 89 41 08              - mov [rcx+08],eax
kuro.exe+E400E: 8B 84 3E CC 01 00 00  - mov eax,[rsi+rdi+000001CC]
kuro.exe+E4015: 89 41 0C              - mov [rcx+0C],eax
kuro.exe+E4018: 8B 84 3E D0 01 00 00  - mov eax,[rsi+rdi+000001D0]
kuro.exe+E401F: 89 41 10              - mov [rcx+10],eax
kuro.exe+E4022: 48 8B 8F 90 06 00 00  - mov rcx,[rdi+00000690]
kuro.exe+E4029: 8B 84 3E 04 02 00 00  - mov eax,[rsi+rdi+00000204]
kuro.exe+E4030: 89 41 18              - mov [rcx+18],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Hide HUD / Dialogue / Interface (F7 Toggle)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(showinterface_aob,kuro.exe,F3 0F 11 47 68 48 85 D2) // should be unique
alloc(newmem,$1000,showinterface_aob)

label(code)
label(return)

newmem:
  pxor xmm0,xmm0
code:
  movss [rdi+68],xmm0
  jmp return

showinterface_aob:
  jmp newmem
return:
registersymbol(showinterface_aob)

[DISABLE]

showinterface_aob:
  db F3 0F 11 47 68

unregistersymbol(showinterface_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: kuro.exe+3D42FD

kuro.exe+3D42C8: 89 47 58                 - mov [rdi+58],eax
kuro.exe+3D42CB: 8B 87 FC 01 00 00        - mov eax,[rdi+000001FC]
kuro.exe+3D42D1: 89 47 5C                 - mov [rdi+5C],eax
kuro.exe+3D42D4: 8B 87 00 02 00 00        - mov eax,[rdi+00000200]
kuro.exe+3D42DA: 89 47 60                 - mov [rdi+60],eax
kuro.exe+3D42DD: F3 0F 10 86 D4 00 00 00  - movss xmm0,[rsi+000000D4]
kuro.exe+3D42E5: F3 0F 59 87 1C 02 00 00  - mulss xmm0,[rdi+0000021C]
kuro.exe+3D42ED: 48 8B 57 70              - mov rdx,[rdi+70]
kuro.exe+3D42F1: 8B 87 D8 00 00 00        - mov eax,[rdi+000000D8]
kuro.exe+3D42F7: 89 87 DC 00 00 00        - mov [rdi+000000DC],eax
// ---------- INJECTING HERE ----------
kuro.exe+3D42FD: F3 0F 11 47 68           - movss [rdi+68],xmm0
// ---------- DONE INJECTING  ----------
kuro.exe+3D4302: 48 85 D2                 - test rdx,rdx
kuro.exe+3D4305: 0F 84 FF 01 00 00        - je kuro.exe+3D450A
kuro.exe+3D430B: 8B 8F BC 00 00 00        - mov ecx,[rdi+000000BC]
kuro.exe+3D4311: 8B C1                    - mov eax,ecx
kuro.exe+3D4313: 83 E0 06                 - and eax,06
kuro.exe+3D4316: 3C 06                    - cmp al,06
kuro.exe+3D4318: 75 3D                    - jne kuro.exe+3D4357
kuro.exe+3D431A: F6 C1 08                 - test cl,08
kuro.exe+3D431D: 74 38                    - je kuro.exe+3D4357
kuro.exe+3D431F: 48 8D 4A 08              - lea rcx,[rdx+08]
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>118</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <Comments>The movement algorithm is based on Cyber's CS4 script, adapted for Kuro's engine by me.  Credit also goes to DhaosCollider for AOB (from Kuro CLE) for FOV, to lock player movement, and for the fantastic idea of using the latter to allow WASD control.  My eternal gratitude to both!
</Comments>
</CheatTable>
