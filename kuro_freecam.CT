<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Free Camera"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(speedModifier,8)
speedModifier:
dd (float)3
globalalloc(useMouse,8)
useMouse:
dd (float)1 // 1 to use mouse, 0 to not use mouse
globalalloc(mouseSensitivity,8)
mouseSensitivity:
dd (float)8

aobscanmodule(cameracoordinates_aob,ed9.exe,48 8B 8F 90 06 00 00 8B 84 3E C8) // should be unique
aobscanmodule(moveplayer_aob,ed9.exe,FF 94 C3 D8 00 00 00 8B 84 BB 08) // should be unique
alloc(newmem,$100,cameracoordinates_aob)
alloc(cameracoordinates,$100,cameracoordinates_aob)
registersymbol(cameracoordinates_aob)
registersymbol(moveplayer_aob)
registersymbol(cameracoordinates)

label(code)
label(return)

newmem:

code:
  mov rcx,[rdi+00000690]
  mov [cameracoordinates],rcx
  jmp return

cameracoordinates_aob:
  jmp newmem
  nop 2
return:

cameracoordinates_aob+E:
  db 90 90 90 8B 84 3E CC 01 00 00 90 90 90 8B 84 3E D0 01 00 00 90 90 90 48 8B 8F 90 06 00 00 8B 84 3E 04 02 00 00 90 90 90 8B 84 3E 08 02 00 00 90 90 90 8B 84 3E 0C 02 00 00 90 90 90 8B 84 3E 40 02 00 00 48 8B 8F 90 06 00 00 90 90 90 8B 84 3E 44 02 00 00 90 90 90 8B 84 3E 48 02 00 00 90 90 90

moveplayer_aob:
  db 90 90 90 90 90 90 90

{$lua}

function checkKeys()
  if (getAddressSafe("[cameracoordinates]")) then
    --Read and assign speed modifier value
    local speed = readFloat("speedModifier")
    local use_mouse = readFloat("useMouse")
    local mouse_speed = readFloat("mouseSensitivity")

    --Camera Coordinates
    local camx = readFloat("[cameracoordinates]+08") -- Camera X
    local camy = readFloat("[cameracoordinates]+10") -- Camera Y
    local camz = readFloat("[cameracoordinates]+0C") -- Camera Z

    --Target Coordinates
    local targetx = readFloat("[cameracoordinates]+18") -- Camera X
    local targety = readFloat("[cameracoordinates]+20") -- Camera Y
    local targetz = readFloat("[cameracoordinates]+1C") -- Camera Z

    --Prevent endless error loop if camera status is not initiated
    if (targetz == nil) or (targetz == camz and targetx == camx and targety == camy) then
      speed = 0
      camx = 0
      camy = 0
      camz = 0
      targetx = 0
      targety = 0
      targetz = 0
    else

      local new_mouse_x,new_mouse_y = getMousePos()
      local mouse_loaded = readInteger("cameracoordinates+38")

      --Initialize mouse coordinates on first run (if using mouse)
      if not (mouse_loaded == 1) and (use_mouse == 1) then
        new_mouse_x = getScreenWidth() / 2
        new_mouse_y = getScreenHeight() / 2
        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
        writeInteger("cameracoordinates+38",1)
      end

      --Measure mouse movement from previous cycle
      local mouse_move_x = new_mouse_x - getScreenWidth() / 2
      local mouse_move_y = new_mouse_y - getScreenHeight() / 2

      --Mouse Rotation in Radians
      --Use math.rad() to convert from degrees if game values aren't in radians
      local camdist = ((targetx - camx)^2 + (targety - camy)^2 + (targetz - camz)^2)^0.5
      local tilt = math.atan2(camz - targetz, ((targetx - camx)^2 + (targety - camy)^2)^0.5)
      local pan = math.atan2(targetx - camx, targety - camy) + math.rad(180) -- Horizontal (pan)

      --Sine and Cosine of Rotation Values
      local siny = math.sin(pan) -- Sine of Horizontal (pan)
      local cosy = math.cos(pan) -- Cosine of Horizontal (pan)
      local sinp = math.sin(tilt) -- Sine of Vertical (tilt)
      local cosp = math.cos(tilt) -- Cosine of Vertical (tilt)

      --Forward
      if isKeyPressed(VK_W) then
        camx = camx - (siny * speed * 0.03)
        camy = camy - (cosy * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Left
      if isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Back
      if isKeyPressed(VK_S) then
        camx = camx + (siny * speed * 0.03)
        camy = camy + (cosy * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Right
      if isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(90)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(90)) * speed * 0.03)
      end
      --Forward/Right
      if isKeyPressed(VK_W) and isKeyPressed(VK_D) then
        camx = camx - (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Forward/Left
      if isKeyPressed(VK_W) and isKeyPressed(VK_A) then
        camx = camx - (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy - (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz - (sinp * speed * 0.03)
      end
      --Back/Left
      if isKeyPressed(VK_S) and isKeyPressed(VK_A) then
        camx = camx + (math.sin(pan - math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan - math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Back/Right
      if isKeyPressed(VK_S) and isKeyPressed(VK_D) then
        camx = camx + (math.sin(pan + math.rad(45)) * speed * 0.03)
        camy = camy + (math.cos(pan + math.rad(45)) * speed * 0.03)
        camz = camz + (sinp * speed * 0.03)
      end
      --Up
      if isKeyPressed(VK_R) then
       camz = camz + (speed * 0.02)
      end
      --Down
      if isKeyPressed(VK_F) then
       camz = camz - (speed * 0.02)
      end
      --Pan right
      if isKeyPressed(VK_L) then
        pan = pan - speed * 0.01
      end
      --Pan left
      if isKeyPressed(VK_J) then
        pan = pan + speed * 0.01
      end
      --Tilt up
      if isKeyPressed(VK_I) then
        tilt = math.max(tilt - speed * 0.01, math.rad(-89.5))
      end
      --Tilt down
      if isKeyPressed(VK_K) then
        tilt = math.min(tilt + speed * 0.01, math.rad(89.5))
      end

      if (use_mouse == 1) then
        --Tilt by mouse
        if not(mouse_move_y == 0) then
          tilt = math.min(math.max(tilt + mouse_move_y * mouse_speed * 0.0003, math.rad(-89.5)), math.rad(89.5))
        end
        --Tilt by mouse
        if not(mouse_move_x == 0) then
          pan = pan - mouse_move_x * mouse_speed * 0.0003
        end

        setMousePos(getScreenWidth() / 2, getScreenHeight() / 2)
      end

      --Create a copy of the entire memory block before alterations.  I do not know if +14, +24 or +34 are used, but this preserves them.
      copyMemory("[cameracoordinates]+08",48,"cameracoordinates+08")

      --Write new values into the temporary buffer
      writeFloat("cameracoordinates+08", camx)
      writeFloat("cameracoordinates+10", camy)
      writeFloat("cameracoordinates+0C", camz)
      writeFloat("cameracoordinates+18", camx - (camdist * math.cos(tilt) * math.sin(pan)))
      writeFloat("cameracoordinates+20", camy - (camdist * math.cos(tilt) * math.cos(pan)))
      writeFloat("cameracoordinates+1C", camz - (camdist * math.sin(tilt)))
      writeFloat("cameracoordinates+28", 0) --Anti-vomit settings
      writeFloat("cameracoordinates+2C", 1)
      writeFloat("cameracoordinates+30", 0)

      --Copy buffer back into memory read by game engine
      copyMemory("cameracoordinates+08",48,"[cameracoordinates]+08")
    end


    --Speed Modifiers
    if isKeyPressed(VK_F3) then --If F3 is pressed, quadruple the speed
      writeFloat("speedModifier", 12)
    elseif isKeyPressed(VK_F2) then --If F2 is pressed, double the speed
      writeFloat("speedModifier", 6)
    elseif isKeyPressed(VK_F1) then --If F1 is pressed, slow way down
      writeFloat("speedModifier", .5)
    else --If nothing is pressed, speed is normal
      writeFloat("speedModifier", 3)
    end
  end
end

t=createTimer(nil)
timer_setInterval(t, 10)
timer_onTimer(t, checkKeys)
timer_setEnabled(t, true)

{$asm}

[DISABLE]
{$lua}

timer_setEnabled(t, false)

{$asm}
cameracoordinates_aob:
  db 48 8B 8F 90 06 00 00

cameracoordinates_aob+E:
  db 89 41 08 8B 84 3E CC 01 00 00 89 41 0C 8B 84 3E D0 01 00 00 89 41 10 48 8B 8F 90 06 00 00 8B 84 3E 04 02 00 00 89 41 18 8B 84 3E 08 02 00 00 89 41 1C 8B 84 3E 0C 02 00 00 89 41 20 8B 84 3E 40 02 00 00 48 8B 8F 90 06 00 00 89 41 28 8B 84 3E 44 02 00 00 89 41 2C 8B 84 3E 48 02 00 00 89 41 30

moveplayer_aob:
  db FF 94 C3 D8 00 00 00

unregistersymbol(cameracoordinates_aob)
unregistersymbol(moveplayer_aob)
unregistersymbol(cameracoordinates)
dealloc(cameracoordinates)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ed9.exe+10D3FD, ed9.exe+10D40B - Camera

ed9.exe+10D3DF: F3 0F 58 78 0C        - addss xmm7,[rax+0C]
ed9.exe+10D3E4: 48 83 C3 40           - add rbx,40
ed9.exe+10D3E8: 48 3B DD              - cmp rbx,rbp
ed9.exe+10D3EB: 75 C3                 - jne ed9.exe+10D3B0
ed9.exe+10D3ED: 8B 87 34 07 00 00     - mov eax,[rdi+00000734]
ed9.exe+10D3F3: D1 E8                 - shr eax,1
ed9.exe+10D3F5: A8 01                 - test al,01
ed9.exe+10D3F7: 0F 85 DB 00 00 00     - jne ed9.exe+10D4D8
// ---------- INJECTING HERE ----------
ed9.exe+10D3FD: 48 8B 8F 90 06 00 00  - mov rcx,[rdi+00000690]
// ---------- DONE INJECTING  ----------
ed9.exe+10D404: 8B 84 3E C8 01 00 00  - mov eax,[rsi+rdi+000001C8]
// ---------- INJECTING HERE ----------
ed9.exe+10D40B: 89 41 08              - mov [rcx+08],eax
ed9.exe+10D40E: 8B 84 3E CC 01 00 00  - mov eax,[rsi+rdi+000001CC]
ed9.exe+10D415: 89 41 0C              - mov [rcx+0C],eax
ed9.exe+10D418: 8B 84 3E D0 01 00 00  - mov eax,[rsi+rdi+000001D0]
ed9.exe+10D41F: 89 41 10              - mov [rcx+10],eax
ed9.exe+10D422: 48 8B 8F 90 06 00 00  - mov rcx,[rdi+00000690]
ed9.exe+10D429: 8B 84 3E 04 02 00 00  - mov eax,[rsi+rdi+00000204]
ed9.exe+10D430: 89 41 18              - mov [rcx+18],eax
ed9.exe+10D433: 8B 84 3E 08 02 00 00  - mov eax,[rsi+rdi+00000208]
ed9.exe+10D43A: 89 41 1C              - mov [rcx+1C],eax
ed9.exe+10D43D: 8B 84 3E 0C 02 00 00  - mov eax,[rsi+rdi+0000020C]
ed9.exe+10D444: 89 41 20              - mov [rcx+20],eax
ed9.exe+10D447: 8B 84 3E 40020000     - mov eax,[rsi+rdi+00000240]
ed9.exe+10D44E: 48 8B 8F 90060000     - mov rcx,[rdi+00000690]
ed9.exe+10D455: 89 41 28              - mov [rcx+28],eax
ed9.exe+10D458: 8B 84 3E 44020000     - mov eax,[rsi+rdi+00000244]
ed9.exe+10D45F: 89 41 2C              - mov [rcx+2C],eax
ed9.exe+10D462: 8B 84 3E 48020000     - mov eax,[rsi+rdi+00000248]
ed9.exe+10D469: 89 41 30              - mov [rcx+30],eax
// ---------- DONE INJECTING  ----------
ed9.exe+10D46C: 45 85 FF              - test r15d,r15d
ed9.exe+10D46F: 75 2D                 - jne ed9.exe+10D49E
ed9.exe+10D471: 48 8B 0D F0786900     - mov rcx,[ed9.exe+7A4D68]
ed9.exe+10D478: F3 0F10 8C 3E 30030000  - movss xmm1,[rsi+rdi+00000330]
ed9.exe+10D481: 48 81 C1 0C010000     - add rcx,0000010C
ed9.exe+10D488: E8 03322800           - call ed9.exe+390690
ed9.exe+10D48D: 48 8B 87 90060000     - mov rax,[rdi+00000690]
ed9.exe+10D494: F3 0F11 80 58010000   - movss [rax+00000158],xmm0
ed9.exe+10D49C: EB 14                 - jmp ed9.exe+10D4B2
ed9.exe+10D49E: 48 8B 8F 90060000     - mov rcx,[rdi+00000690]

// ORIGINAL CODE - INJECTION POINT: ed9.exe+20BF0D - Lock Player Movement

ed9.exe+20BED5: 89 AB 40 02 00 00        - mov [rbx+00000240],ebp
ed9.exe+20BEDB: 8B 84 BB 04 02 00 00     - mov eax,[rbx+rdi*4+00000204]
ed9.exe+20BEE2: 89 84 BB 00 02 00 00     - mov [rbx+rdi*4+00000200],eax
ed9.exe+20BEE9: 89 AC BB 08 02 00 00     - mov [rbx+rdi*4+00000208],ebp
ed9.exe+20BEF0: 89 83 44 02 00 00        - mov [rbx+00000244],eax
ed9.exe+20BEF6: 48 63 84 BB 00 02 00 00  - movsxd  rax,dword ptr [rbx+rdi*4+00000200]
ed9.exe+20BEFE: 83 F8 FF                 - cmp eax,-01
ed9.exe+20BF01: 74 28                    - je ed9.exe+20BF2B
ed9.exe+20BF03: 48 8B 8B D0 00 00 00     - mov rcx,[rbx+000000D0]
ed9.exe+20BF0A: 0F 28 CF                 - movaps xmm1,xmm7
// ---------- INJECTING HERE ----------
ed9.exe+20BF0D: FF 94 C3 D8 00 00 00     - call qword ptr [rbx+rax*8+000000D8]
// ---------- DONE INJECTING  ----------
ed9.exe+20BF14: 8B 84 BB 08 02 00 00     - mov eax,[rbx+rdi*4+00000208]
ed9.exe+20BF1B: FF C0                    - inc eax
ed9.exe+20BF1D: 41 3B C7                 - cmp eax,r15d
ed9.exe+20BF20: 41 0F 4F C7              - cmovg eax,r15d
ed9.exe+20BF24: 89 84 BB 08 02 00 00     - mov [rbx+rdi*4+00000208],eax
ed9.exe+20BF2B: 48 8B 03                 - mov rax,[rbx]
ed9.exe+20BF2E: 0F 28 C7                 - movaps xmm0,xmm7
ed9.exe+20BF31: F3 0F 58 83 40 02 00 00  - addss xmm0,[rbx+00000240]
ed9.exe+20BF39: 48 8B CB                 - mov rcx,rbx
ed9.exe+20BF3C: F3 0F 11 83 40 02 00 00  - movss [rbx+00000240],xmm0
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>96</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Camera Coordinates"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Camera X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>08</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"Camera Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"Camera Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>0C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Camera Target X"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>18</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"Camera Target Y"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>20</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Camera Target Z"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>cameracoordinates</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Set Custom FOV"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(fov_aob,ed9.exe,41 8B 81 70 01 00 00) // should be unique
aobscanmodule(unlockfov1_aob,ed9.exe,F3 0F 11 80 70 01 00 00 4C 89 A0 74 01 00 00 44 89 A0 7C 01 00 00 E9) // should be unique
aobscanmodule(unlockfov2_aob,ed9.exe,F3 0F 11 43 08 48 83 C4 30) // should be unique
alloc(newmem,$1000,fov_aob)
alloc(fov,8)
registersymbol(fov_aob)
registersymbol(fov)
registersymbol(unlockfov1_aob)
registersymbol(unlockfov2_aob)

label(code)
label(return)

newmem:

code:
  mov [fov],r9
  mov eax,[r9+00000170]
  jmp return

fov_aob:
  jmp newmem
  nop 2
return:

unlockfov1_aob:
  db 90 90 90 90 90 90 90 90

unlockfov2_aob:
  db 90 90 90 90 90

[DISABLE]

fov_aob:
  db 41 8B 81 70 01 00 00

unlockfov1_aob:
  db F3 0F 11 80 70 01 00 00

unlockfov2_aob:
  db F3 0F 11 43 08

unregistersymbol(unlockfov1_aob)
unregistersymbol(unlockfov2_aob)
unregistersymbol(fov_aob)
unregistersymbol(fov)
dealloc(fov)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ed9.exe+10B726 - Read FOV

ed9.exe+10B708: 0F 28 C1                    - movaps xmm0,xmm1
ed9.exe+10B70B: F3 0F 58 C2                 - addss xmm0,xmm2
ed9.exe+10B70F: 0F 2F F0                    - comiss xmm6,xmm0
ed9.exe+10B712: 77 25                       - ja ed9.exe+10B739
ed9.exe+10B714: 0F 28 C6                    - movaps xmm0,xmm6
ed9.exe+10B717: F3 0F 58 C2                 - addss xmm0,xmm2
ed9.exe+10B71B: 0F 2F C8                    - comiss xmm1,xmm0
ed9.exe+10B71E: 77 19                       - ja ed9.exe+10B739
ed9.exe+10B720: 40 88 73 7C                 - mov [rbx+7C],sil
ed9.exe+10B724: EB 13                       - jmp ed9.exe+10B739
// ---------- INJECTING HERE ----------
ed9.exe+10B726: 41 8B 81 70 01 00 00        - mov eax,[r9+00000170]
// ---------- DONE INJECTING  ----------
ed9.exe+10B72D: 89 43 28                    - mov [rbx+28],eax
ed9.exe+10B730: F3 41 0F 10 B1 70 01 00 00  - movss xmm6,[r9+00000170]
ed9.exe+10B739: 44 0F 28 84 24 80 00 00 00  - movaps xmm8,[rsp+00000080]
ed9.exe+10B742: F3 0F 10 55 B7              - movss xmm2,[rbp-49]
ed9.exe+10B747: 4C 8D 45 B7                 - lea r8,[rbp-49]
ed9.exe+10B74B: F3 0F 10 4D BB              - movss xmm1,[rbp-45]
ed9.exe+10B750: 48 8D 55 F7                 - lea rdx,[rbp-09]
ed9.exe+10B754: F3 0F 10 45 BF              - movss xmm0,[rbp-41]
ed9.exe+10B759: F3 0F 59 D6                 - mulss xmm2,xmm6
ed9.exe+10B75D: 89 75 B7                    - mov [rbp-49],esi

// ORIGINAL CODE - INJECTION POINT: ed9.exe+1D205B - Unlock FOV1

ed9.exe+1D2017: 44 0F 28 8C 24 80 01 00 00  - movaps xmm9,[rsp+00000180]
ed9.exe+1D2020: 0F 28 BC 24 A0 01 00 00     - movaps xmm7,[rsp+000001A0]
ed9.exe+1D2028: 4C 8B B4 24 C8 01 00 00     - mov r14,[rsp+000001C8]
ed9.exe+1D2030: 48 8B B4 24 08 02 00 00     - mov rsi,[rsp+00000208]
ed9.exe+1D2038: 74 0D                       - je ed9.exe+1D2047
ed9.exe+1D203A: 44 39 A7 44 04 00 00        - cmp [rdi+00000444],r12d
ed9.exe+1D2041: 0F 84 E8 02 00 00           - je ed9.exe+1D232F
ed9.exe+1D2047: 48 8B 47 08                 - mov rax,[rdi+08]
ed9.exe+1D204B: F3 0F 11 80 68 01 00 00     - movss [rax+00000168],xmm0
ed9.exe+1D2053: F3 0F 11 80 6C 01 00 00     - movss [rax+0000016C],xmm0
// ---------- INJECTING HERE ----------
ed9.exe+1D205B: F3 0F 11 80 70 01 00 00     - movss [rax+00000170],xmm0
// ---------- DONE INJECTING  ----------
ed9.exe+1D2063: 4C 89 A0 74 01 00 00        - mov [rax+00000174],r12
ed9.exe+1D206A: 44 89 A0 7C 01 00 00        - mov [rax+0000017C],r12d
ed9.exe+1D2071: E9 B9 02 00 00              - jmp ed9.exe+1D232F
ed9.exe+1D2076: F6 82 0A 01 00 00 04        - test byte ptr [rdx+0000010A],04
ed9.exe+1D207D: 74 36                       - je ed9.exe+1D20B5
ed9.exe+1D207F: 41 0F 28 CC                 - movaps xmm1,xmm12
ed9.exe+1D2083: 48 8B CF                    - mov rcx,rdi
ed9.exe+1D2086: E8 C5 11 00 00              - call ed9.exe+1D3250
ed9.exe+1D208B: 48 8B 47 08                 - mov rax,[rdi+08]
ed9.exe+1D208F: F3 0F 11 80 68 01 00 00     - movss [rax+00000168],xmm0

// ORIGINAL CODE - INJECTION POINT: ed9.exe+6D0D1 - Unlock FOV2

ed9.exe+6D0AF: CC                 - int 3
ed9.exe+6D0B0: 40 53              - push rbx
ed9.exe+6D0B2: 48 83 EC 30        - sub rsp,30
ed9.exe+6D0B6: F3 0F 10 51 0C     - movss xmm2,[rcx+0C]
ed9.exe+6D0BB: 48 8B D9           - mov rbx,rcx
ed9.exe+6D0BE: 48 83 C1 0C        - add rcx,0C
ed9.exe+6D0C2: F3 0F 10 43 10     - movss xmm0,[rbx+10]
ed9.exe+6D0C7: 0F 2F C2           - comiss xmm0,xmm2
ed9.exe+6D0CA: 72 10              - jb ed9.exe+6D0DC
ed9.exe+6D0CC: F3 0F 10 43 04     - movss xmm0,[rbx+04]
// ---------- INJECTING HERE ----------
ed9.exe+6D0D1: F3 0F 11 43 08     - movss [rbx+08],xmm0
// ---------- DONE INJECTING  ----------
ed9.exe+6D0D6: 48 83 C4 30        - add rsp,30
ed9.exe+6D0DA: 5B                 - pop rbx
ed9.exe+6D0DB: C3                 - ret
ed9.exe+6D0DC: F3 0F 58 C1        - addss xmm0,xmm1
ed9.exe+6D0E0: 0F 29 74 24 20     - movaps [rsp+20],xmm6
ed9.exe+6D0E5: 48 8D 44 24 40     - lea rax,[rsp+40]
ed9.exe+6D0EA: 0F 2F C2           - comiss xmm0,xmm2
ed9.exe+6D0ED: F3 0F 11 44 24 40  - movss [rsp+40],xmm0
ed9.exe+6D0F3: 48 0F 47 C1        - cmova rax,rcx
ed9.exe+6D0F7: 8B 4B 14           - mov ecx,[rbx+14]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>32</ID>
          <Description>"FOV (Default 2.5)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fov</Address>
          <Offsets>
            <Offset>170</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Set Camera Min Z to Floor (Use No Clip)"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(cameradistance_aob,ed9.exe,02 00 00 48 8B 47 08 F3 0F 11 80 68 01 00 00) // should be unique
alloc(newmem,$1000,cameradistance_aob)

label(code)
label(return)

newmem:

code:
  mov [rax+00000168],(float)5
  movss xmm0,[rax+00000168]
  movss [rax+00000168],xmm0
  jmp return

cameradistance_aob+07:
  jmp newmem
  nop 3
return:
registersymbol(cameradistance_aob)

[DISABLE]

cameradistance_aob+07:
  db F3 0F 11 80 68 01 00 00

unregistersymbol(cameradistance_aob)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: ed9.exe+1D204B

ed9.exe+1D2005: 44 0F 28 9C 24 60 01 00 00  - movaps xmm11,[rsp+00000160]
ed9.exe+1D200E: 44 0F 28 94 24 70 01 00 00  - movaps xmm10,[rsp+00000170]
ed9.exe+1D2017: 44 0F 28 8C 24 80 01 00 00  - movaps xmm9,[rsp+00000180]
ed9.exe+1D2020: 0F 28 BC 24 A0 01 00 00     - movaps xmm7,[rsp+000001A0]
ed9.exe+1D2028: 4C 8B B4 24 C8 01 00 00     - mov r14,[rsp+000001C8]
ed9.exe+1D2030: 48 8B B4 24 08 02 00 00     - mov rsi,[rsp+00000208]
ed9.exe+1D2038: 74 0D                       - je ed9.exe+1D2047
ed9.exe+1D203A: 44 39 A7 44 04 00 00        - cmp [rdi+00000444],r12d
ed9.exe+1D2041: 0F 84 E8 02 00 00           - je ed9.exe+1D232F
ed9.exe+1D2047: 48 8B 47 08                 - mov rax,[rdi+08]
// ---------- INJECTING HERE ----------
ed9.exe+1D204B: F3 0F 11 80 68 01 00 00     - movss [rax+00000168],xmm0
// ---------- DONE INJECTING  ----------
ed9.exe+1D2053: F3 0F 11 80 6C 01 00 00     - movss [rax+0000016C],xmm0
ed9.exe+1D205B: F3 0F 11 80 70 01 00 00     - movss [rax+00000170],xmm0
ed9.exe+1D2063: 4C 89 A0 74 01 00 00        - mov [rax+00000174],r12
ed9.exe+1D206A: 44 89 A0 7C 01 00 00        - mov [rax+0000017C],r12d
ed9.exe+1D2071: E9 B9 02 00 00              - jmp ed9.exe+1D232F
ed9.exe+1D2076: F6 82 0A 01 00 00 04        - test byte ptr [rdx+0000010A],04
ed9.exe+1D207D: 74 36                       - je ed9.exe+1D20B5
ed9.exe+1D207F: 41 0F 28 CC                 - movaps xmm1,xmm12
ed9.exe+1D2083: 48 8B CF                    - mov rcx,rdi
ed9.exe+1D2086: E8 C5 11 00 00              - call ed9.exe+1D3250
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"No Clip"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(noclip_aob,ed9.exe,89 83 9C 08 00 00 72) // should be unique
registersymbol(noclip_aob)

noclip_aob:
  db 90 90 90 90 90 90 72 5A 90 90 90 90 90 90 90 90 90 90

[DISABLE]

noclip_aob:
  db 89 83 9C 08 00 00 72 5A C7 83 9C 08 00 00 00 00 00 00

unregistersymbol(noclip_aob)

{
// ORIGINAL CODE - INJECTION POINT: ed9.exe+1903B1

ed9.exe+190382: 48 8D 44 24 20                 - lea rax,[rsp+20]
ed9.exe+190387: F3 0F 5C C7                    - subss xmm0,xmm7
ed9.exe+19038B: C7 44 24 24 00 00 00 00        - mov [rsp+24],00000000
ed9.exe+190393: 48 8D 4C 24 24                 - lea rcx,[rsp+24]
ed9.exe+190398: 41 0F 2F C0                    - comiss xmm0,xmm8
ed9.exe+19039C: F3 0F 11 44 24 20              - movss [rsp+20],xmm0
ed9.exe+1903A2: F3 0F 10 44 24 28              - movss xmm0,[rsp+28]
ed9.exe+1903A8: 48 0F 46 C1                    - cmovbe rax,rcx
ed9.exe+1903AC: 0F 2F C1                       - comiss xmm0,xmm1
ed9.exe+1903AF: 8B 00                          - mov eax,[rax]
// ---------- INJECTING HERE ----------
ed9.exe+1903B1: 89 83 9C 08 00 00              - mov [rbx+0000089C],eax
ed9.exe+1903B7: 72 5A                          - jb ed9.exe+190413
ed9.exe+1903B9: C7 83 9C 08 00 00 00 00 00 00  - mov [rbx+0000089C],00000000
// ---------- DONE INJECTING  ----------
ed9.exe+1903C3: EB 4E                          - jmp ed9.exe+190413
ed9.exe+1903C5: F6 87 0A 01 00 00 08           - test byte ptr [rdi+0000010A],08
ed9.exe+1903CC: 74 0C                          - je ed9.exe+1903DA
ed9.exe+1903CE: C7 83 9C 08 00 00 00 00 80 3F  - mov [rbx+0000089C],3F800000
ed9.exe+1903D8: EB 39                          - jmp ed9.exe+190413
ed9.exe+1903DA: F3 0F 58 BB 9C 08 00 00        - addss xmm7,[rbx+0000089C]
ed9.exe+1903E2: 48 8D 44 24 28                 - lea rax,[rsp+28]
ed9.exe+1903E7: C7 44 24 20 00 00 80 3F        - mov [rsp+20],3F800000
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <Comments>The movement algorithm is based on Cyber's CS4 script, adapted for Kuro's engine by me.  Credit also goes to DhaosCollider for AOB for FOV, to lock player movement, and for the fantastic idea of using the latter to allow WASD control.  My eternal gratitude to both!
</Comments>
</CheatTable>
